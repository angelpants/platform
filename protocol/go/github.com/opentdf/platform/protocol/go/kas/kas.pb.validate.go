// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kas/kas.proto

package kas

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoRequestMultiError, or
// nil if none found.
func (m *InfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InfoRequestMultiError(errors)
	}

	return nil
}

// InfoRequestMultiError is an error wrapping multiple validation errors
// returned by InfoRequest.ValidateAll() if the designated constraints aren't met.
type InfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoRequestMultiError) AllErrors() []error { return m }

// InfoRequestValidationError is the validation error returned by
// InfoRequest.Validate if the designated constraints aren't met.
type InfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoRequestValidationError) ErrorName() string { return "InfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e InfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoRequestValidationError{}

// Validate checks the field values on InfoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoResponseMultiError, or
// nil if none found.
func (m *InfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return InfoResponseMultiError(errors)
	}

	return nil
}

// InfoResponseMultiError is an error wrapping multiple validation errors
// returned by InfoResponse.ValidateAll() if the designated constraints aren't met.
type InfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoResponseMultiError) AllErrors() []error { return m }

// InfoResponseValidationError is the validation error returned by
// InfoResponse.Validate if the designated constraints aren't met.
type InfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoResponseValidationError) ErrorName() string { return "InfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e InfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoResponseValidationError{}

// Validate checks the field values on LegacyPublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LegacyPublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LegacyPublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LegacyPublicKeyRequestMultiError, or nil if none found.
func (m *LegacyPublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LegacyPublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Algorithm

	if len(errors) > 0 {
		return LegacyPublicKeyRequestMultiError(errors)
	}

	return nil
}

// LegacyPublicKeyRequestMultiError is an error wrapping multiple validation
// errors returned by LegacyPublicKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type LegacyPublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LegacyPublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LegacyPublicKeyRequestMultiError) AllErrors() []error { return m }

// LegacyPublicKeyRequestValidationError is the validation error returned by
// LegacyPublicKeyRequest.Validate if the designated constraints aren't met.
type LegacyPublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LegacyPublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LegacyPublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LegacyPublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LegacyPublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LegacyPublicKeyRequestValidationError) ErrorName() string {
	return "LegacyPublicKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LegacyPublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLegacyPublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LegacyPublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LegacyPublicKeyRequestValidationError{}

// Validate checks the field values on PublicKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKeyRequestMultiError, or nil if none found.
func (m *PublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Algorithm

	// no validation rules for Fmt

	// no validation rules for V

	if len(errors) > 0 {
		return PublicKeyRequestMultiError(errors)
	}

	return nil
}

// PublicKeyRequestMultiError is an error wrapping multiple validation errors
// returned by PublicKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type PublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyRequestMultiError) AllErrors() []error { return m }

// PublicKeyRequestValidationError is the validation error returned by
// PublicKeyRequest.Validate if the designated constraints aren't met.
type PublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyRequestValidationError) ErrorName() string { return "PublicKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e PublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyRequestValidationError{}

// Validate checks the field values on PublicKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKeyResponseMultiError, or nil if none found.
func (m *PublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for Kid

	if len(errors) > 0 {
		return PublicKeyResponseMultiError(errors)
	}

	return nil
}

// PublicKeyResponseMultiError is an error wrapping multiple validation errors
// returned by PublicKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type PublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyResponseMultiError) AllErrors() []error { return m }

// PublicKeyResponseValidationError is the validation error returned by
// PublicKeyResponse.Validate if the designated constraints aren't met.
type PublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyResponseValidationError) ErrorName() string {
	return "PublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyResponseValidationError{}

// Validate checks the field values on RewrapRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RewrapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewrapRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RewrapRequestMultiError, or
// nil if none found.
func (m *RewrapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RewrapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignedRequestToken

	if len(errors) > 0 {
		return RewrapRequestMultiError(errors)
	}

	return nil
}

// RewrapRequestMultiError is an error wrapping multiple validation errors
// returned by RewrapRequest.ValidateAll() if the designated constraints
// aren't met.
type RewrapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewrapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewrapRequestMultiError) AllErrors() []error { return m }

// RewrapRequestValidationError is the validation error returned by
// RewrapRequest.Validate if the designated constraints aren't met.
type RewrapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewrapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewrapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewrapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewrapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewrapRequestValidationError) ErrorName() string { return "RewrapRequestValidationError" }

// Error satisfies the builtin error interface
func (e RewrapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewrapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewrapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewrapRequestValidationError{}

// Validate checks the field values on RewrapResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RewrapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewrapResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RewrapResponseMultiError,
// or nil if none found.
func (m *RewrapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RewrapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMetadata()))
		i := 0
		for key := range m.GetMetadata() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetadata()[key]
			_ = val

			// no validation rules for Metadata[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RewrapResponseValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RewrapResponseValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RewrapResponseValidationError{
						field:  fmt.Sprintf("Metadata[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for EntityWrappedKey

	// no validation rules for SessionPublicKey

	// no validation rules for SchemaVersion

	if len(errors) > 0 {
		return RewrapResponseMultiError(errors)
	}

	return nil
}

// RewrapResponseMultiError is an error wrapping multiple validation errors
// returned by RewrapResponse.ValidateAll() if the designated constraints
// aren't met.
type RewrapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewrapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewrapResponseMultiError) AllErrors() []error { return m }

// RewrapResponseValidationError is the validation error returned by
// RewrapResponse.Validate if the designated constraints aren't met.
type RewrapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewrapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewrapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewrapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewrapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewrapResponseValidationError) ErrorName() string { return "RewrapResponseValidationError" }

// Error satisfies the builtin error interface
func (e RewrapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewrapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewrapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewrapResponseValidationError{}
