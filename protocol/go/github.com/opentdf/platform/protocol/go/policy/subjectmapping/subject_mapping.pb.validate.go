// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/subjectmapping/subject_mapping.proto

package subjectmapping

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/opentdf/platform/protocol/go/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.MetadataUpdateEnum(0)
)

// Validate checks the field values on MatchSubjectMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MatchSubjectMappingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchSubjectMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MatchSubjectMappingsRequestMultiError, or nil if none found.
func (m *MatchSubjectMappingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchSubjectMappingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MatchSubjectMappingsRequestValidationError{
						field:  fmt.Sprintf("SubjectProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MatchSubjectMappingsRequestValidationError{
						field:  fmt.Sprintf("SubjectProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchSubjectMappingsRequestValidationError{
					field:  fmt.Sprintf("SubjectProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MatchSubjectMappingsRequestMultiError(errors)
	}

	return nil
}

// MatchSubjectMappingsRequestMultiError is an error wrapping multiple
// validation errors returned by MatchSubjectMappingsRequest.ValidateAll() if
// the designated constraints aren't met.
type MatchSubjectMappingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchSubjectMappingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchSubjectMappingsRequestMultiError) AllErrors() []error { return m }

// MatchSubjectMappingsRequestValidationError is the validation error returned
// by MatchSubjectMappingsRequest.Validate if the designated constraints
// aren't met.
type MatchSubjectMappingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchSubjectMappingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchSubjectMappingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchSubjectMappingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchSubjectMappingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchSubjectMappingsRequestValidationError) ErrorName() string {
	return "MatchSubjectMappingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MatchSubjectMappingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchSubjectMappingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchSubjectMappingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchSubjectMappingsRequestValidationError{}

// Validate checks the field values on MatchSubjectMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MatchSubjectMappingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchSubjectMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MatchSubjectMappingsResponseMultiError, or nil if none found.
func (m *MatchSubjectMappingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchSubjectMappingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MatchSubjectMappingsResponseValidationError{
						field:  fmt.Sprintf("SubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MatchSubjectMappingsResponseValidationError{
						field:  fmt.Sprintf("SubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchSubjectMappingsResponseValidationError{
					field:  fmt.Sprintf("SubjectMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MatchSubjectMappingsResponseMultiError(errors)
	}

	return nil
}

// MatchSubjectMappingsResponseMultiError is an error wrapping multiple
// validation errors returned by MatchSubjectMappingsResponse.ValidateAll() if
// the designated constraints aren't met.
type MatchSubjectMappingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchSubjectMappingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchSubjectMappingsResponseMultiError) AllErrors() []error { return m }

// MatchSubjectMappingsResponseValidationError is the validation error returned
// by MatchSubjectMappingsResponse.Validate if the designated constraints
// aren't met.
type MatchSubjectMappingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchSubjectMappingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchSubjectMappingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchSubjectMappingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchSubjectMappingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchSubjectMappingsResponseValidationError) ErrorName() string {
	return "MatchSubjectMappingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MatchSubjectMappingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchSubjectMappingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchSubjectMappingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchSubjectMappingsResponseValidationError{}

// Validate checks the field values on GetSubjectMappingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubjectMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubjectMappingRequestMultiError, or nil if none found.
func (m *GetSubjectMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubjectMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubjectMappingRequestMultiError(errors)
	}

	return nil
}

// GetSubjectMappingRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubjectMappingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubjectMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubjectMappingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubjectMappingRequestMultiError) AllErrors() []error { return m }

// GetSubjectMappingRequestValidationError is the validation error returned by
// GetSubjectMappingRequest.Validate if the designated constraints aren't met.
type GetSubjectMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectMappingRequestValidationError) ErrorName() string {
	return "GetSubjectMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectMappingRequestValidationError{}

// Validate checks the field values on GetSubjectMappingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubjectMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubjectMappingResponseMultiError, or nil if none found.
func (m *GetSubjectMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubjectMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubjectMappingResponseValidationError{
				field:  "SubjectMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSubjectMappingResponseMultiError(errors)
	}

	return nil
}

// GetSubjectMappingResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubjectMappingResponse.ValidateAll() if the
// designated constraints aren't met.
type GetSubjectMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubjectMappingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubjectMappingResponseMultiError) AllErrors() []error { return m }

// GetSubjectMappingResponseValidationError is the validation error returned by
// GetSubjectMappingResponse.Validate if the designated constraints aren't met.
type GetSubjectMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectMappingResponseValidationError) ErrorName() string {
	return "GetSubjectMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectMappingResponseValidationError{}

// Validate checks the field values on ListSubjectMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubjectMappingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubjectMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubjectMappingsRequestMultiError, or nil if none found.
func (m *ListSubjectMappingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubjectMappingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSubjectMappingsRequestMultiError(errors)
	}

	return nil
}

// ListSubjectMappingsRequestMultiError is an error wrapping multiple
// validation errors returned by ListSubjectMappingsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSubjectMappingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubjectMappingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubjectMappingsRequestMultiError) AllErrors() []error { return m }

// ListSubjectMappingsRequestValidationError is the validation error returned
// by ListSubjectMappingsRequest.Validate if the designated constraints aren't met.
type ListSubjectMappingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubjectMappingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubjectMappingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubjectMappingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubjectMappingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubjectMappingsRequestValidationError) ErrorName() string {
	return "ListSubjectMappingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubjectMappingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubjectMappingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubjectMappingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubjectMappingsRequestValidationError{}

// Validate checks the field values on ListSubjectMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubjectMappingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubjectMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubjectMappingsResponseMultiError, or nil if none found.
func (m *ListSubjectMappingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubjectMappingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubjectMappingsResponseValidationError{
						field:  fmt.Sprintf("SubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubjectMappingsResponseValidationError{
						field:  fmt.Sprintf("SubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubjectMappingsResponseValidationError{
					field:  fmt.Sprintf("SubjectMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubjectMappingsResponseMultiError(errors)
	}

	return nil
}

// ListSubjectMappingsResponseMultiError is an error wrapping multiple
// validation errors returned by ListSubjectMappingsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSubjectMappingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubjectMappingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubjectMappingsResponseMultiError) AllErrors() []error { return m }

// ListSubjectMappingsResponseValidationError is the validation error returned
// by ListSubjectMappingsResponse.Validate if the designated constraints
// aren't met.
type ListSubjectMappingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubjectMappingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubjectMappingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubjectMappingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubjectMappingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubjectMappingsResponseValidationError) ErrorName() string {
	return "ListSubjectMappingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubjectMappingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubjectMappingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubjectMappingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubjectMappingsResponseValidationError{}

// Validate checks the field values on CreateSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubjectMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubjectMappingRequestMultiError, or nil if none found.
func (m *CreateSubjectMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubjectMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeValueId

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSubjectMappingRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSubjectMappingRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSubjectMappingRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExistingSubjectConditionSetId

	if all {
		switch v := interface{}(m.GetNewSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubjectMappingRequestValidationError{
					field:  "NewSubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubjectMappingRequestValidationError{
					field:  "NewSubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubjectMappingRequestValidationError{
				field:  "NewSubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubjectMappingRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubjectMappingRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubjectMappingRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubjectMappingRequestMultiError(errors)
	}

	return nil
}

// CreateSubjectMappingRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSubjectMappingRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSubjectMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubjectMappingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubjectMappingRequestMultiError) AllErrors() []error { return m }

// CreateSubjectMappingRequestValidationError is the validation error returned
// by CreateSubjectMappingRequest.Validate if the designated constraints
// aren't met.
type CreateSubjectMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubjectMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubjectMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubjectMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubjectMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubjectMappingRequestValidationError) ErrorName() string {
	return "CreateSubjectMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubjectMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubjectMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubjectMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubjectMappingRequestValidationError{}

// Validate checks the field values on CreateSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubjectMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubjectMappingResponseMultiError, or nil if none found.
func (m *CreateSubjectMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubjectMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubjectMappingResponseValidationError{
				field:  "SubjectMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubjectMappingResponseMultiError(errors)
	}

	return nil
}

// CreateSubjectMappingResponseMultiError is an error wrapping multiple
// validation errors returned by CreateSubjectMappingResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateSubjectMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubjectMappingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubjectMappingResponseMultiError) AllErrors() []error { return m }

// CreateSubjectMappingResponseValidationError is the validation error returned
// by CreateSubjectMappingResponse.Validate if the designated constraints
// aren't met.
type CreateSubjectMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubjectMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubjectMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubjectMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubjectMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubjectMappingResponseValidationError) ErrorName() string {
	return "CreateSubjectMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubjectMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubjectMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubjectMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubjectMappingResponseValidationError{}

// Validate checks the field values on UpdateSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubjectMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubjectMappingRequestMultiError, or nil if none found.
func (m *UpdateSubjectMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubjectMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SubjectConditionSetId

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubjectMappingRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubjectMappingRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubjectMappingRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubjectMappingRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubjectMappingRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubjectMappingRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MetadataUpdateBehavior

	if len(errors) > 0 {
		return UpdateSubjectMappingRequestMultiError(errors)
	}

	return nil
}

// UpdateSubjectMappingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSubjectMappingRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubjectMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubjectMappingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubjectMappingRequestMultiError) AllErrors() []error { return m }

// UpdateSubjectMappingRequestValidationError is the validation error returned
// by UpdateSubjectMappingRequest.Validate if the designated constraints
// aren't met.
type UpdateSubjectMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubjectMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubjectMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubjectMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubjectMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubjectMappingRequestValidationError) ErrorName() string {
	return "UpdateSubjectMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubjectMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubjectMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubjectMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubjectMappingRequestValidationError{}

// Validate checks the field values on UpdateSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubjectMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubjectMappingResponseMultiError, or nil if none found.
func (m *UpdateSubjectMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubjectMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubjectMappingResponseValidationError{
				field:  "SubjectMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubjectMappingResponseMultiError(errors)
	}

	return nil
}

// UpdateSubjectMappingResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubjectMappingResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubjectMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubjectMappingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubjectMappingResponseMultiError) AllErrors() []error { return m }

// UpdateSubjectMappingResponseValidationError is the validation error returned
// by UpdateSubjectMappingResponse.Validate if the designated constraints
// aren't met.
type UpdateSubjectMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubjectMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubjectMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubjectMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubjectMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubjectMappingResponseValidationError) ErrorName() string {
	return "UpdateSubjectMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubjectMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubjectMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubjectMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubjectMappingResponseValidationError{}

// Validate checks the field values on DeleteSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubjectMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubjectMappingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubjectMappingRequestMultiError, or nil if none found.
func (m *DeleteSubjectMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubjectMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSubjectMappingRequestMultiError(errors)
	}

	return nil
}

// DeleteSubjectMappingRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSubjectMappingRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteSubjectMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubjectMappingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubjectMappingRequestMultiError) AllErrors() []error { return m }

// DeleteSubjectMappingRequestValidationError is the validation error returned
// by DeleteSubjectMappingRequest.Validate if the designated constraints
// aren't met.
type DeleteSubjectMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectMappingRequestValidationError) ErrorName() string {
	return "DeleteSubjectMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectMappingRequestValidationError{}

// Validate checks the field values on DeleteSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubjectMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubjectMappingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubjectMappingResponseMultiError, or nil if none found.
func (m *DeleteSubjectMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubjectMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSubjectMappingResponseValidationError{
					field:  "SubjectMapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSubjectMappingResponseValidationError{
				field:  "SubjectMapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSubjectMappingResponseMultiError(errors)
	}

	return nil
}

// DeleteSubjectMappingResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteSubjectMappingResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteSubjectMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubjectMappingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubjectMappingResponseMultiError) AllErrors() []error { return m }

// DeleteSubjectMappingResponseValidationError is the validation error returned
// by DeleteSubjectMappingResponse.Validate if the designated constraints
// aren't met.
type DeleteSubjectMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectMappingResponseValidationError) ErrorName() string {
	return "DeleteSubjectMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectMappingResponseValidationError{}

// Validate checks the field values on GetSubjectConditionSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubjectConditionSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSubjectConditionSetRequestMultiError, or nil if none found.
func (m *GetSubjectConditionSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubjectConditionSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubjectConditionSetRequestMultiError(errors)
	}

	return nil
}

// GetSubjectConditionSetRequestMultiError is an error wrapping multiple
// validation errors returned by GetSubjectConditionSetRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSubjectConditionSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubjectConditionSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubjectConditionSetRequestMultiError) AllErrors() []error { return m }

// GetSubjectConditionSetRequestValidationError is the validation error
// returned by GetSubjectConditionSetRequest.Validate if the designated
// constraints aren't met.
type GetSubjectConditionSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectConditionSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectConditionSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectConditionSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectConditionSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectConditionSetRequestValidationError) ErrorName() string {
	return "GetSubjectConditionSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectConditionSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectConditionSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectConditionSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectConditionSetRequestValidationError{}

// Validate checks the field values on GetSubjectConditionSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubjectConditionSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubjectConditionSetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSubjectConditionSetResponseMultiError, or nil if none found.
func (m *GetSubjectConditionSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubjectConditionSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubjectConditionSetResponseValidationError{
				field:  "SubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAssociatedSubjectMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubjectConditionSetResponseValidationError{
						field:  fmt.Sprintf("AssociatedSubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubjectConditionSetResponseValidationError{
						field:  fmt.Sprintf("AssociatedSubjectMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubjectConditionSetResponseValidationError{
					field:  fmt.Sprintf("AssociatedSubjectMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubjectConditionSetResponseMultiError(errors)
	}

	return nil
}

// GetSubjectConditionSetResponseMultiError is an error wrapping multiple
// validation errors returned by GetSubjectConditionSetResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSubjectConditionSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubjectConditionSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubjectConditionSetResponseMultiError) AllErrors() []error { return m }

// GetSubjectConditionSetResponseValidationError is the validation error
// returned by GetSubjectConditionSetResponse.Validate if the designated
// constraints aren't met.
type GetSubjectConditionSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectConditionSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectConditionSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectConditionSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectConditionSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectConditionSetResponseValidationError) ErrorName() string {
	return "GetSubjectConditionSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectConditionSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectConditionSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectConditionSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectConditionSetResponseValidationError{}

// Validate checks the field values on ListSubjectConditionSetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubjectConditionSetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubjectConditionSetsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSubjectConditionSetsRequestMultiError, or nil if none found.
func (m *ListSubjectConditionSetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubjectConditionSetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSubjectConditionSetsRequestMultiError(errors)
	}

	return nil
}

// ListSubjectConditionSetsRequestMultiError is an error wrapping multiple
// validation errors returned by ListSubjectConditionSetsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListSubjectConditionSetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubjectConditionSetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubjectConditionSetsRequestMultiError) AllErrors() []error { return m }

// ListSubjectConditionSetsRequestValidationError is the validation error
// returned by ListSubjectConditionSetsRequest.Validate if the designated
// constraints aren't met.
type ListSubjectConditionSetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubjectConditionSetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubjectConditionSetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubjectConditionSetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubjectConditionSetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubjectConditionSetsRequestValidationError) ErrorName() string {
	return "ListSubjectConditionSetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubjectConditionSetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubjectConditionSetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubjectConditionSetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubjectConditionSetsRequestValidationError{}

// Validate checks the field values on ListSubjectConditionSetsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSubjectConditionSetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubjectConditionSetsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSubjectConditionSetsResponseMultiError, or nil if none found.
func (m *ListSubjectConditionSetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubjectConditionSetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectConditionSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubjectConditionSetsResponseValidationError{
						field:  fmt.Sprintf("SubjectConditionSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubjectConditionSetsResponseValidationError{
						field:  fmt.Sprintf("SubjectConditionSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubjectConditionSetsResponseValidationError{
					field:  fmt.Sprintf("SubjectConditionSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubjectConditionSetsResponseMultiError(errors)
	}

	return nil
}

// ListSubjectConditionSetsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSubjectConditionSetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSubjectConditionSetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubjectConditionSetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubjectConditionSetsResponseMultiError) AllErrors() []error { return m }

// ListSubjectConditionSetsResponseValidationError is the validation error
// returned by ListSubjectConditionSetsResponse.Validate if the designated
// constraints aren't met.
type ListSubjectConditionSetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubjectConditionSetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubjectConditionSetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubjectConditionSetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubjectConditionSetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubjectConditionSetsResponseValidationError) ErrorName() string {
	return "ListSubjectConditionSetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubjectConditionSetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubjectConditionSetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubjectConditionSetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubjectConditionSetsResponseValidationError{}

// Validate checks the field values on SubjectConditionSetCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectConditionSetCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectConditionSetCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectConditionSetCreateMultiError, or nil if none found.
func (m *SubjectConditionSetCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectConditionSetCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectConditionSetCreateValidationError{
						field:  fmt.Sprintf("SubjectSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectConditionSetCreateValidationError{
						field:  fmt.Sprintf("SubjectSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectConditionSetCreateValidationError{
					field:  fmt.Sprintf("SubjectSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubjectConditionSetCreateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubjectConditionSetCreateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubjectConditionSetCreateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubjectConditionSetCreateMultiError(errors)
	}

	return nil
}

// SubjectConditionSetCreateMultiError is an error wrapping multiple validation
// errors returned by SubjectConditionSetCreate.ValidateAll() if the
// designated constraints aren't met.
type SubjectConditionSetCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectConditionSetCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectConditionSetCreateMultiError) AllErrors() []error { return m }

// SubjectConditionSetCreateValidationError is the validation error returned by
// SubjectConditionSetCreate.Validate if the designated constraints aren't met.
type SubjectConditionSetCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectConditionSetCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectConditionSetCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectConditionSetCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectConditionSetCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectConditionSetCreateValidationError) ErrorName() string {
	return "SubjectConditionSetCreateValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectConditionSetCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectConditionSetCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectConditionSetCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectConditionSetCreateValidationError{}

// Validate checks the field values on CreateSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSubjectConditionSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSubjectConditionSetRequestMultiError, or nil if none found.
func (m *CreateSubjectConditionSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubjectConditionSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubjectConditionSetRequestValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubjectConditionSetRequestValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubjectConditionSetRequestValidationError{
				field:  "SubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubjectConditionSetRequestMultiError(errors)
	}

	return nil
}

// CreateSubjectConditionSetRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateSubjectConditionSetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubjectConditionSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubjectConditionSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubjectConditionSetRequestMultiError) AllErrors() []error { return m }

// CreateSubjectConditionSetRequestValidationError is the validation error
// returned by CreateSubjectConditionSetRequest.Validate if the designated
// constraints aren't met.
type CreateSubjectConditionSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubjectConditionSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubjectConditionSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubjectConditionSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubjectConditionSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubjectConditionSetRequestValidationError) ErrorName() string {
	return "CreateSubjectConditionSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubjectConditionSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubjectConditionSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubjectConditionSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubjectConditionSetRequestValidationError{}

// Validate checks the field values on CreateSubjectConditionSetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSubjectConditionSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubjectConditionSetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSubjectConditionSetResponseMultiError, or nil if none found.
func (m *CreateSubjectConditionSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubjectConditionSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubjectConditionSetResponseValidationError{
				field:  "SubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubjectConditionSetResponseMultiError(errors)
	}

	return nil
}

// CreateSubjectConditionSetResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateSubjectConditionSetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubjectConditionSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubjectConditionSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubjectConditionSetResponseMultiError) AllErrors() []error { return m }

// CreateSubjectConditionSetResponseValidationError is the validation error
// returned by CreateSubjectConditionSetResponse.Validate if the designated
// constraints aren't met.
type CreateSubjectConditionSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubjectConditionSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubjectConditionSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubjectConditionSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubjectConditionSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubjectConditionSetResponseValidationError) ErrorName() string {
	return "CreateSubjectConditionSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubjectConditionSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubjectConditionSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubjectConditionSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubjectConditionSetResponseValidationError{}

// Validate checks the field values on UpdateSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSubjectConditionSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSubjectConditionSetRequestMultiError, or nil if none found.
func (m *UpdateSubjectConditionSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubjectConditionSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetSubjectSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubjectConditionSetRequestValidationError{
						field:  fmt.Sprintf("SubjectSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubjectConditionSetRequestValidationError{
						field:  fmt.Sprintf("SubjectSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubjectConditionSetRequestValidationError{
					field:  fmt.Sprintf("SubjectSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubjectConditionSetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubjectConditionSetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubjectConditionSetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MetadataUpdateBehavior

	if len(errors) > 0 {
		return UpdateSubjectConditionSetRequestMultiError(errors)
	}

	return nil
}

// UpdateSubjectConditionSetRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSubjectConditionSetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubjectConditionSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubjectConditionSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubjectConditionSetRequestMultiError) AllErrors() []error { return m }

// UpdateSubjectConditionSetRequestValidationError is the validation error
// returned by UpdateSubjectConditionSetRequest.Validate if the designated
// constraints aren't met.
type UpdateSubjectConditionSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubjectConditionSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubjectConditionSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubjectConditionSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubjectConditionSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubjectConditionSetRequestValidationError) ErrorName() string {
	return "UpdateSubjectConditionSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubjectConditionSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubjectConditionSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubjectConditionSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubjectConditionSetRequestValidationError{}

// Validate checks the field values on UpdateSubjectConditionSetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSubjectConditionSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubjectConditionSetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSubjectConditionSetResponseMultiError, or nil if none found.
func (m *UpdateSubjectConditionSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubjectConditionSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubjectConditionSetResponseValidationError{
				field:  "SubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubjectConditionSetResponseMultiError(errors)
	}

	return nil
}

// UpdateSubjectConditionSetResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSubjectConditionSetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubjectConditionSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubjectConditionSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubjectConditionSetResponseMultiError) AllErrors() []error { return m }

// UpdateSubjectConditionSetResponseValidationError is the validation error
// returned by UpdateSubjectConditionSetResponse.Validate if the designated
// constraints aren't met.
type UpdateSubjectConditionSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubjectConditionSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubjectConditionSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubjectConditionSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubjectConditionSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubjectConditionSetResponseValidationError) ErrorName() string {
	return "UpdateSubjectConditionSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubjectConditionSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubjectConditionSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubjectConditionSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubjectConditionSetResponseValidationError{}

// Validate checks the field values on DeleteSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteSubjectConditionSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubjectConditionSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteSubjectConditionSetRequestMultiError, or nil if none found.
func (m *DeleteSubjectConditionSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubjectConditionSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSubjectConditionSetRequestMultiError(errors)
	}

	return nil
}

// DeleteSubjectConditionSetRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteSubjectConditionSetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubjectConditionSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubjectConditionSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubjectConditionSetRequestMultiError) AllErrors() []error { return m }

// DeleteSubjectConditionSetRequestValidationError is the validation error
// returned by DeleteSubjectConditionSetRequest.Validate if the designated
// constraints aren't met.
type DeleteSubjectConditionSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectConditionSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectConditionSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectConditionSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectConditionSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectConditionSetRequestValidationError) ErrorName() string {
	return "DeleteSubjectConditionSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectConditionSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectConditionSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectConditionSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectConditionSetRequestValidationError{}

// Validate checks the field values on DeleteSubjectConditionSetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteSubjectConditionSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubjectConditionSetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteSubjectConditionSetResponseMultiError, or nil if none found.
func (m *DeleteSubjectConditionSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubjectConditionSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubjectConditionSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSubjectConditionSetResponseValidationError{
					field:  "SubjectConditionSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectConditionSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSubjectConditionSetResponseValidationError{
				field:  "SubjectConditionSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSubjectConditionSetResponseMultiError(errors)
	}

	return nil
}

// DeleteSubjectConditionSetResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteSubjectConditionSetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubjectConditionSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubjectConditionSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubjectConditionSetResponseMultiError) AllErrors() []error { return m }

// DeleteSubjectConditionSetResponseValidationError is the validation error
// returned by DeleteSubjectConditionSetResponse.Validate if the designated
// constraints aren't met.
type DeleteSubjectConditionSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectConditionSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectConditionSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectConditionSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectConditionSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectConditionSetResponseValidationError) ErrorName() string {
	return "DeleteSubjectConditionSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectConditionSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectConditionSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectConditionSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectConditionSetResponseValidationError{}
