// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/unsafe/unsafe.proto

package unsafe

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	policy "github.com/opentdf/platform/protocol/go/policy"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = policy.AttributeRuleTypeEnum(0)
)

// Validate checks the field values on UnsafeUpdateNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeUpdateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsafeUpdateNamespaceRequestMultiError, or nil if none found.
func (m *UnsafeUpdateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UnsafeUpdateNamespaceRequestMultiError(errors)
	}

	return nil
}

// UnsafeUpdateNamespaceRequestMultiError is an error wrapping multiple
// validation errors returned by UnsafeUpdateNamespaceRequest.ValidateAll() if
// the designated constraints aren't met.
type UnsafeUpdateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateNamespaceRequestMultiError) AllErrors() []error { return m }

// UnsafeUpdateNamespaceRequestValidationError is the validation error returned
// by UnsafeUpdateNamespaceRequest.Validate if the designated constraints
// aren't met.
type UnsafeUpdateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateNamespaceRequestValidationError) ErrorName() string {
	return "UnsafeUpdateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateNamespaceRequestValidationError{}

// Validate checks the field values on UnsafeUpdateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeUpdateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateNamespaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeUpdateNamespaceResponseMultiError, or nil if none found.
func (m *UnsafeUpdateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeUpdateNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeUpdateNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeUpdateNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeUpdateNamespaceResponseMultiError(errors)
	}

	return nil
}

// UnsafeUpdateNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by UnsafeUpdateNamespaceResponse.ValidateAll()
// if the designated constraints aren't met.
type UnsafeUpdateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateNamespaceResponseMultiError) AllErrors() []error { return m }

// UnsafeUpdateNamespaceResponseValidationError is the validation error
// returned by UnsafeUpdateNamespaceResponse.Validate if the designated
// constraints aren't met.
type UnsafeUpdateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateNamespaceResponseValidationError) ErrorName() string {
	return "UnsafeUpdateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateNamespaceResponseValidationError{}

// Validate checks the field values on UnsafeReactivateNamespaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeReactivateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeReactivateNamespaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeReactivateNamespaceRequestMultiError, or nil if none found.
func (m *UnsafeReactivateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnsafeReactivateNamespaceRequestMultiError(errors)
	}

	return nil
}

// UnsafeReactivateNamespaceRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeReactivateNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateNamespaceRequestMultiError) AllErrors() []error { return m }

// UnsafeReactivateNamespaceRequestValidationError is the validation error
// returned by UnsafeReactivateNamespaceRequest.Validate if the designated
// constraints aren't met.
type UnsafeReactivateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateNamespaceRequestValidationError) ErrorName() string {
	return "UnsafeReactivateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateNamespaceRequestValidationError{}

// Validate checks the field values on UnsafeReactivateNamespaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeReactivateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeReactivateNamespaceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeReactivateNamespaceResponseMultiError, or nil if none found.
func (m *UnsafeReactivateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeReactivateNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeReactivateNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeReactivateNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeReactivateNamespaceResponseMultiError(errors)
	}

	return nil
}

// UnsafeReactivateNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeReactivateNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateNamespaceResponseMultiError) AllErrors() []error { return m }

// UnsafeReactivateNamespaceResponseValidationError is the validation error
// returned by UnsafeReactivateNamespaceResponse.Validate if the designated
// constraints aren't met.
type UnsafeReactivateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateNamespaceResponseValidationError) ErrorName() string {
	return "UnsafeReactivateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateNamespaceResponseValidationError{}

// Validate checks the field values on UnsafeDeleteNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeDeleteNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsafeDeleteNamespaceRequestMultiError, or nil if none found.
func (m *UnsafeDeleteNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fqn

	if len(errors) > 0 {
		return UnsafeDeleteNamespaceRequestMultiError(errors)
	}

	return nil
}

// UnsafeDeleteNamespaceRequestMultiError is an error wrapping multiple
// validation errors returned by UnsafeDeleteNamespaceRequest.ValidateAll() if
// the designated constraints aren't met.
type UnsafeDeleteNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteNamespaceRequestMultiError) AllErrors() []error { return m }

// UnsafeDeleteNamespaceRequestValidationError is the validation error returned
// by UnsafeDeleteNamespaceRequest.Validate if the designated constraints
// aren't met.
type UnsafeDeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteNamespaceRequestValidationError) ErrorName() string {
	return "UnsafeDeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteNamespaceRequestValidationError{}

// Validate checks the field values on UnsafeDeleteNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeDeleteNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteNamespaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeDeleteNamespaceResponseMultiError, or nil if none found.
func (m *UnsafeDeleteNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeDeleteNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeDeleteNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeDeleteNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeDeleteNamespaceResponseMultiError(errors)
	}

	return nil
}

// UnsafeDeleteNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by UnsafeDeleteNamespaceResponse.ValidateAll()
// if the designated constraints aren't met.
type UnsafeDeleteNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteNamespaceResponseMultiError) AllErrors() []error { return m }

// UnsafeDeleteNamespaceResponseValidationError is the validation error
// returned by UnsafeDeleteNamespaceResponse.Validate if the designated
// constraints aren't met.
type UnsafeDeleteNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteNamespaceResponseValidationError) ErrorName() string {
	return "UnsafeDeleteNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteNamespaceResponseValidationError{}

// Validate checks the field values on UnsafeUpdateAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeUpdateAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsafeUpdateAttributeRequestMultiError, or nil if none found.
func (m *UnsafeUpdateAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Rule

	if len(errors) > 0 {
		return UnsafeUpdateAttributeRequestMultiError(errors)
	}

	return nil
}

// UnsafeUpdateAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by UnsafeUpdateAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type UnsafeUpdateAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateAttributeRequestMultiError) AllErrors() []error { return m }

// UnsafeUpdateAttributeRequestValidationError is the validation error returned
// by UnsafeUpdateAttributeRequest.Validate if the designated constraints
// aren't met.
type UnsafeUpdateAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateAttributeRequestValidationError) ErrorName() string {
	return "UnsafeUpdateAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateAttributeRequestValidationError{}

// Validate checks the field values on UnsafeUpdateAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeUpdateAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateAttributeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeUpdateAttributeResponseMultiError, or nil if none found.
func (m *UnsafeUpdateAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeUpdateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeUpdateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeUpdateAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeUpdateAttributeResponseMultiError(errors)
	}

	return nil
}

// UnsafeUpdateAttributeResponseMultiError is an error wrapping multiple
// validation errors returned by UnsafeUpdateAttributeResponse.ValidateAll()
// if the designated constraints aren't met.
type UnsafeUpdateAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateAttributeResponseMultiError) AllErrors() []error { return m }

// UnsafeUpdateAttributeResponseValidationError is the validation error
// returned by UnsafeUpdateAttributeResponse.Validate if the designated
// constraints aren't met.
type UnsafeUpdateAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateAttributeResponseValidationError) ErrorName() string {
	return "UnsafeUpdateAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateAttributeResponseValidationError{}

// Validate checks the field values on UnsafeReactivateAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeReactivateAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeReactivateAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeReactivateAttributeRequestMultiError, or nil if none found.
func (m *UnsafeReactivateAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnsafeReactivateAttributeRequestMultiError(errors)
	}

	return nil
}

// UnsafeReactivateAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeReactivateAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateAttributeRequestMultiError) AllErrors() []error { return m }

// UnsafeReactivateAttributeRequestValidationError is the validation error
// returned by UnsafeReactivateAttributeRequest.Validate if the designated
// constraints aren't met.
type UnsafeReactivateAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateAttributeRequestValidationError) ErrorName() string {
	return "UnsafeReactivateAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateAttributeRequestValidationError{}

// Validate checks the field values on UnsafeReactivateAttributeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeReactivateAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeReactivateAttributeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeReactivateAttributeResponseMultiError, or nil if none found.
func (m *UnsafeReactivateAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeReactivateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeReactivateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeReactivateAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeReactivateAttributeResponseMultiError(errors)
	}

	return nil
}

// UnsafeReactivateAttributeResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeReactivateAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateAttributeResponseMultiError) AllErrors() []error { return m }

// UnsafeReactivateAttributeResponseValidationError is the validation error
// returned by UnsafeReactivateAttributeResponse.Validate if the designated
// constraints aren't met.
type UnsafeReactivateAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateAttributeResponseValidationError) ErrorName() string {
	return "UnsafeReactivateAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateAttributeResponseValidationError{}

// Validate checks the field values on UnsafeDeleteAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeDeleteAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsafeDeleteAttributeRequestMultiError, or nil if none found.
func (m *UnsafeDeleteAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fqn

	if len(errors) > 0 {
		return UnsafeDeleteAttributeRequestMultiError(errors)
	}

	return nil
}

// UnsafeDeleteAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by UnsafeDeleteAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type UnsafeDeleteAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteAttributeRequestMultiError) AllErrors() []error { return m }

// UnsafeDeleteAttributeRequestValidationError is the validation error returned
// by UnsafeDeleteAttributeRequest.Validate if the designated constraints
// aren't met.
type UnsafeDeleteAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteAttributeRequestValidationError) ErrorName() string {
	return "UnsafeDeleteAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteAttributeRequestValidationError{}

// Validate checks the field values on UnsafeDeleteAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsafeDeleteAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteAttributeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsafeDeleteAttributeResponseMultiError, or nil if none found.
func (m *UnsafeDeleteAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeDeleteAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeDeleteAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeDeleteAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeDeleteAttributeResponseMultiError(errors)
	}

	return nil
}

// UnsafeDeleteAttributeResponseMultiError is an error wrapping multiple
// validation errors returned by UnsafeDeleteAttributeResponse.ValidateAll()
// if the designated constraints aren't met.
type UnsafeDeleteAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteAttributeResponseMultiError) AllErrors() []error { return m }

// UnsafeDeleteAttributeResponseValidationError is the validation error
// returned by UnsafeDeleteAttributeResponse.Validate if the designated
// constraints aren't met.
type UnsafeDeleteAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteAttributeResponseValidationError) ErrorName() string {
	return "UnsafeDeleteAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteAttributeResponseValidationError{}

// Validate checks the field values on UnsafeUpdateAttributeValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeUpdateAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateAttributeValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeUpdateAttributeValueRequestMultiError, or nil if none found.
func (m *UnsafeUpdateAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Value

	if len(errors) > 0 {
		return UnsafeUpdateAttributeValueRequestMultiError(errors)
	}

	return nil
}

// UnsafeUpdateAttributeValueRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeUpdateAttributeValueRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsafeUpdateAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateAttributeValueRequestMultiError) AllErrors() []error { return m }

// UnsafeUpdateAttributeValueRequestValidationError is the validation error
// returned by UnsafeUpdateAttributeValueRequest.Validate if the designated
// constraints aren't met.
type UnsafeUpdateAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateAttributeValueRequestValidationError) ErrorName() string {
	return "UnsafeUpdateAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateAttributeValueRequestValidationError{}

// Validate checks the field values on UnsafeUpdateAttributeValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeUpdateAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeUpdateAttributeValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeUpdateAttributeValueResponseMultiError, or nil if none found.
func (m *UnsafeUpdateAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeUpdateAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeUpdateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeUpdateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeUpdateAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeUpdateAttributeValueResponseMultiError(errors)
	}

	return nil
}

// UnsafeUpdateAttributeValueResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeUpdateAttributeValueResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsafeUpdateAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeUpdateAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeUpdateAttributeValueResponseMultiError) AllErrors() []error { return m }

// UnsafeUpdateAttributeValueResponseValidationError is the validation error
// returned by UnsafeUpdateAttributeValueResponse.Validate if the designated
// constraints aren't met.
type UnsafeUpdateAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeUpdateAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeUpdateAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeUpdateAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeUpdateAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeUpdateAttributeValueResponseValidationError) ErrorName() string {
	return "UnsafeUpdateAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeUpdateAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeUpdateAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeUpdateAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeUpdateAttributeValueResponseValidationError{}

// Validate checks the field values on UnsafeReactivateAttributeValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnsafeReactivateAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeReactivateAttributeValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeReactivateAttributeValueRequestMultiError, or nil if none found.
func (m *UnsafeReactivateAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnsafeReactivateAttributeValueRequestMultiError(errors)
	}

	return nil
}

// UnsafeReactivateAttributeValueRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnsafeReactivateAttributeValueRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateAttributeValueRequestMultiError) AllErrors() []error { return m }

// UnsafeReactivateAttributeValueRequestValidationError is the validation error
// returned by UnsafeReactivateAttributeValueRequest.Validate if the
// designated constraints aren't met.
type UnsafeReactivateAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateAttributeValueRequestValidationError) ErrorName() string {
	return "UnsafeReactivateAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateAttributeValueRequestValidationError{}

// Validate checks the field values on UnsafeReactivateAttributeValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnsafeReactivateAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnsafeReactivateAttributeValueResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnsafeReactivateAttributeValueResponseMultiError, or nil if none found.
func (m *UnsafeReactivateAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeReactivateAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeReactivateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeReactivateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeReactivateAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeReactivateAttributeValueResponseMultiError(errors)
	}

	return nil
}

// UnsafeReactivateAttributeValueResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnsafeReactivateAttributeValueResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsafeReactivateAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeReactivateAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeReactivateAttributeValueResponseMultiError) AllErrors() []error { return m }

// UnsafeReactivateAttributeValueResponseValidationError is the validation
// error returned by UnsafeReactivateAttributeValueResponse.Validate if the
// designated constraints aren't met.
type UnsafeReactivateAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeReactivateAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeReactivateAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeReactivateAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeReactivateAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeReactivateAttributeValueResponseValidationError) ErrorName() string {
	return "UnsafeReactivateAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeReactivateAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeReactivateAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeReactivateAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeReactivateAttributeValueResponseValidationError{}

// Validate checks the field values on UnsafeDeleteAttributeValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeDeleteAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteAttributeValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeDeleteAttributeValueRequestMultiError, or nil if none found.
func (m *UnsafeDeleteAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fqn

	if len(errors) > 0 {
		return UnsafeDeleteAttributeValueRequestMultiError(errors)
	}

	return nil
}

// UnsafeDeleteAttributeValueRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeDeleteAttributeValueRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsafeDeleteAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteAttributeValueRequestMultiError) AllErrors() []error { return m }

// UnsafeDeleteAttributeValueRequestValidationError is the validation error
// returned by UnsafeDeleteAttributeValueRequest.Validate if the designated
// constraints aren't met.
type UnsafeDeleteAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteAttributeValueRequestValidationError) ErrorName() string {
	return "UnsafeDeleteAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteAttributeValueRequestValidationError{}

// Validate checks the field values on UnsafeDeleteAttributeValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnsafeDeleteAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsafeDeleteAttributeValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnsafeDeleteAttributeValueResponseMultiError, or nil if none found.
func (m *UnsafeDeleteAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsafeDeleteAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsafeDeleteAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsafeDeleteAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsafeDeleteAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsafeDeleteAttributeValueResponseMultiError(errors)
	}

	return nil
}

// UnsafeDeleteAttributeValueResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnsafeDeleteAttributeValueResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsafeDeleteAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsafeDeleteAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsafeDeleteAttributeValueResponseMultiError) AllErrors() []error { return m }

// UnsafeDeleteAttributeValueResponseValidationError is the validation error
// returned by UnsafeDeleteAttributeValueResponse.Validate if the designated
// constraints aren't met.
type UnsafeDeleteAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsafeDeleteAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsafeDeleteAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsafeDeleteAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsafeDeleteAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsafeDeleteAttributeValueResponseValidationError) ErrorName() string {
	return "UnsafeDeleteAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsafeDeleteAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsafeDeleteAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsafeDeleteAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsafeDeleteAttributeValueResponseValidationError{}
