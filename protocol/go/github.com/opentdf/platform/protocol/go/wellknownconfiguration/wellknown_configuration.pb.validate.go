// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wellknownconfiguration/wellknown_configuration.proto

package wellknownconfiguration

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WellKnownConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WellKnownConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WellKnownConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WellKnownConfigMultiError, or nil if none found.
func (m *WellKnownConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *WellKnownConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfiguration()))
		i := 0
		for key := range m.GetConfiguration() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfiguration()[key]
			_ = val

			// no validation rules for Configuration[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WellKnownConfigValidationError{
							field:  fmt.Sprintf("Configuration[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WellKnownConfigValidationError{
							field:  fmt.Sprintf("Configuration[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WellKnownConfigValidationError{
						field:  fmt.Sprintf("Configuration[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WellKnownConfigMultiError(errors)
	}

	return nil
}

// WellKnownConfigMultiError is an error wrapping multiple validation errors
// returned by WellKnownConfig.ValidateAll() if the designated constraints
// aren't met.
type WellKnownConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WellKnownConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WellKnownConfigMultiError) AllErrors() []error { return m }

// WellKnownConfigValidationError is the validation error returned by
// WellKnownConfig.Validate if the designated constraints aren't met.
type WellKnownConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WellKnownConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WellKnownConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WellKnownConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WellKnownConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WellKnownConfigValidationError) ErrorName() string { return "WellKnownConfigValidationError" }

// Error satisfies the builtin error interface
func (e WellKnownConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWellKnownConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WellKnownConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WellKnownConfigValidationError{}

// Validate checks the field values on GetWellKnownConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWellKnownConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWellKnownConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWellKnownConfigurationRequestMultiError, or nil if none found.
func (m *GetWellKnownConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWellKnownConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetWellKnownConfigurationRequestMultiError(errors)
	}

	return nil
}

// GetWellKnownConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWellKnownConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWellKnownConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWellKnownConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWellKnownConfigurationRequestMultiError) AllErrors() []error { return m }

// GetWellKnownConfigurationRequestValidationError is the validation error
// returned by GetWellKnownConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetWellKnownConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWellKnownConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWellKnownConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWellKnownConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWellKnownConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWellKnownConfigurationRequestValidationError) ErrorName() string {
	return "GetWellKnownConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWellKnownConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWellKnownConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWellKnownConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWellKnownConfigurationRequestValidationError{}

// Validate checks the field values on GetWellKnownConfigurationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWellKnownConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWellKnownConfigurationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWellKnownConfigurationResponseMultiError, or nil if none found.
func (m *GetWellKnownConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWellKnownConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWellKnownConfigurationResponseValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWellKnownConfigurationResponseValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWellKnownConfigurationResponseValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWellKnownConfigurationResponseMultiError(errors)
	}

	return nil
}

// GetWellKnownConfigurationResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWellKnownConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWellKnownConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWellKnownConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWellKnownConfigurationResponseMultiError) AllErrors() []error { return m }

// GetWellKnownConfigurationResponseValidationError is the validation error
// returned by GetWellKnownConfigurationResponse.Validate if the designated
// constraints aren't met.
type GetWellKnownConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWellKnownConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWellKnownConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWellKnownConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWellKnownConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWellKnownConfigurationResponseValidationError) ErrorName() string {
	return "GetWellKnownConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWellKnownConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWellKnownConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWellKnownConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWellKnownConfigurationResponseValidationError{}
