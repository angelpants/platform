// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: entityresolution/entity_resolution.proto

package entityresolution

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResolveEntitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveEntitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveEntitiesRequestMultiError, or nil if none found.
func (m *ResolveEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResolveEntitiesRequestValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResolveEntitiesRequestValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolveEntitiesRequestValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResolveEntitiesRequestMultiError(errors)
	}

	return nil
}

// ResolveEntitiesRequestMultiError is an error wrapping multiple validation
// errors returned by ResolveEntitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type ResolveEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveEntitiesRequestMultiError) AllErrors() []error { return m }

// ResolveEntitiesRequestValidationError is the validation error returned by
// ResolveEntitiesRequest.Validate if the designated constraints aren't met.
type ResolveEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveEntitiesRequestValidationError) ErrorName() string {
	return "ResolveEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveEntitiesRequestValidationError{}

// Validate checks the field values on EntityRepresentation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityRepresentation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityRepresentation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityRepresentationMultiError, or nil if none found.
func (m *EntityRepresentation) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityRepresentation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityRepresentationValidationError{
						field:  fmt.Sprintf("AdditionalProps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityRepresentationValidationError{
						field:  fmt.Sprintf("AdditionalProps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityRepresentationValidationError{
					field:  fmt.Sprintf("AdditionalProps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OriginalId

	if len(errors) > 0 {
		return EntityRepresentationMultiError(errors)
	}

	return nil
}

// EntityRepresentationMultiError is an error wrapping multiple validation
// errors returned by EntityRepresentation.ValidateAll() if the designated
// constraints aren't met.
type EntityRepresentationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityRepresentationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityRepresentationMultiError) AllErrors() []error { return m }

// EntityRepresentationValidationError is the validation error returned by
// EntityRepresentation.Validate if the designated constraints aren't met.
type EntityRepresentationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityRepresentationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityRepresentationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityRepresentationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityRepresentationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityRepresentationValidationError) ErrorName() string {
	return "EntityRepresentationValidationError"
}

// Error satisfies the builtin error interface
func (e EntityRepresentationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityRepresentation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityRepresentationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityRepresentationValidationError{}

// Validate checks the field values on ResolveEntitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveEntitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveEntitiesResponseMultiError, or nil if none found.
func (m *ResolveEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntityRepresentations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResolveEntitiesResponseValidationError{
						field:  fmt.Sprintf("EntityRepresentations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResolveEntitiesResponseValidationError{
						field:  fmt.Sprintf("EntityRepresentations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolveEntitiesResponseValidationError{
					field:  fmt.Sprintf("EntityRepresentations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResolveEntitiesResponseMultiError(errors)
	}

	return nil
}

// ResolveEntitiesResponseMultiError is an error wrapping multiple validation
// errors returned by ResolveEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type ResolveEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveEntitiesResponseMultiError) AllErrors() []error { return m }

// ResolveEntitiesResponseValidationError is the validation error returned by
// ResolveEntitiesResponse.Validate if the designated constraints aren't met.
type ResolveEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveEntitiesResponseValidationError) ErrorName() string {
	return "ResolveEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveEntitiesResponseValidationError{}

// Validate checks the field values on EntityNotFoundError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityNotFoundError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityNotFoundError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityNotFoundErrorMultiError, or nil if none found.
func (m *EntityNotFoundError) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityNotFoundError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityNotFoundErrorValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityNotFoundErrorValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityNotFoundErrorValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Entity

	if len(errors) > 0 {
		return EntityNotFoundErrorMultiError(errors)
	}

	return nil
}

// EntityNotFoundErrorMultiError is an error wrapping multiple validation
// errors returned by EntityNotFoundError.ValidateAll() if the designated
// constraints aren't met.
type EntityNotFoundErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityNotFoundErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityNotFoundErrorMultiError) AllErrors() []error { return m }

// EntityNotFoundErrorValidationError is the validation error returned by
// EntityNotFoundError.Validate if the designated constraints aren't met.
type EntityNotFoundErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityNotFoundErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityNotFoundErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityNotFoundErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityNotFoundErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityNotFoundErrorValidationError) ErrorName() string {
	return "EntityNotFoundErrorValidationError"
}

// Error satisfies the builtin error interface
func (e EntityNotFoundErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityNotFoundError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityNotFoundErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityNotFoundErrorValidationError{}

// Validate checks the field values on CreateEntityChainFromJwtRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityChainFromJwtRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityChainFromJwtRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEntityChainFromJwtRequestMultiError, or nil if none found.
func (m *CreateEntityChainFromJwtRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityChainFromJwtRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEntityChainFromJwtRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEntityChainFromJwtRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEntityChainFromJwtRequestValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEntityChainFromJwtRequestMultiError(errors)
	}

	return nil
}

// CreateEntityChainFromJwtRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEntityChainFromJwtRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateEntityChainFromJwtRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityChainFromJwtRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityChainFromJwtRequestMultiError) AllErrors() []error { return m }

// CreateEntityChainFromJwtRequestValidationError is the validation error
// returned by CreateEntityChainFromJwtRequest.Validate if the designated
// constraints aren't met.
type CreateEntityChainFromJwtRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityChainFromJwtRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityChainFromJwtRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityChainFromJwtRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityChainFromJwtRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityChainFromJwtRequestValidationError) ErrorName() string {
	return "CreateEntityChainFromJwtRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityChainFromJwtRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityChainFromJwtRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityChainFromJwtRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityChainFromJwtRequestValidationError{}

// Validate checks the field values on CreateEntityChainFromJwtResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEntityChainFromJwtResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityChainFromJwtResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEntityChainFromJwtResponseMultiError, or nil if none found.
func (m *CreateEntityChainFromJwtResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityChainFromJwtResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntityChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEntityChainFromJwtResponseValidationError{
						field:  fmt.Sprintf("EntityChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEntityChainFromJwtResponseValidationError{
						field:  fmt.Sprintf("EntityChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEntityChainFromJwtResponseValidationError{
					field:  fmt.Sprintf("EntityChains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEntityChainFromJwtResponseMultiError(errors)
	}

	return nil
}

// CreateEntityChainFromJwtResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateEntityChainFromJwtResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityChainFromJwtResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityChainFromJwtResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityChainFromJwtResponseMultiError) AllErrors() []error { return m }

// CreateEntityChainFromJwtResponseValidationError is the validation error
// returned by CreateEntityChainFromJwtResponse.Validate if the designated
// constraints aren't met.
type CreateEntityChainFromJwtResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityChainFromJwtResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityChainFromJwtResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityChainFromJwtResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityChainFromJwtResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityChainFromJwtResponseValidationError) ErrorName() string {
	return "CreateEntityChainFromJwtResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityChainFromJwtResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityChainFromJwtResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityChainFromJwtResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityChainFromJwtResponseValidationError{}
