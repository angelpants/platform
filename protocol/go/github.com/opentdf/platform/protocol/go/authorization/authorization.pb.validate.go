// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authorization/authorization.proto

package authorization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EntityMultiError, or nil if none found.
func (m *Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	oneofEntityTypePresent := false
	switch v := m.EntityType.(type) {
	case *Entity_EmailAddress:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true
		// no validation rules for EmailAddress
	case *Entity_UserName:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true
		// no validation rules for UserName
	case *Entity_RemoteClaimsUrl:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true
		// no validation rules for RemoteClaimsUrl
	case *Entity_Uuid:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true
		// no validation rules for Uuid
	case *Entity_Claims:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true

		if all {
			switch v := interface{}(m.GetClaims()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityValidationError{
						field:  "Claims",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityValidationError{
						field:  "Claims",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClaims()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Entity_Custom:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true

		if all {
			switch v := interface{}(m.GetCustom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityValidationError{
						field:  "Custom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityValidationError{
						field:  "Custom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Entity_ClientId:
		if v == nil {
			err := EntityValidationError{
				field:  "EntityType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntityTypePresent = true
		// no validation rules for ClientId
	default:
		_ = v // ensures v is used
	}
	if !oneofEntityTypePresent {
		err := EntityValidationError{
			field:  "EntityType",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EntityMultiError(errors)
	}

	return nil
}

// EntityMultiError is an error wrapping multiple validation errors returned by
// Entity.ValidateAll() if the designated constraints aren't met.
type EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityMultiError) AllErrors() []error { return m }

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

// Validate checks the field values on EntityCustom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityCustom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityCustom with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityCustomMultiError, or
// nil if none found.
func (m *EntityCustom) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityCustom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityCustomValidationError{
					field:  "Extension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityCustomValidationError{
					field:  "Extension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityCustomValidationError{
				field:  "Extension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntityCustomMultiError(errors)
	}

	return nil
}

// EntityCustomMultiError is an error wrapping multiple validation errors
// returned by EntityCustom.ValidateAll() if the designated constraints aren't met.
type EntityCustomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityCustomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityCustomMultiError) AllErrors() []error { return m }

// EntityCustomValidationError is the validation error returned by
// EntityCustom.Validate if the designated constraints aren't met.
type EntityCustomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityCustomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityCustomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityCustomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityCustomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityCustomValidationError) ErrorName() string { return "EntityCustomValidationError" }

// Error satisfies the builtin error interface
func (e EntityCustomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityCustom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityCustomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityCustomValidationError{}

// Validate checks the field values on EntityChain with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityChain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityChain with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityChainMultiError, or
// nil if none found.
func (m *EntityChain) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityChain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityChainValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityChainValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityChainValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntityChainMultiError(errors)
	}

	return nil
}

// EntityChainMultiError is an error wrapping multiple validation errors
// returned by EntityChain.ValidateAll() if the designated constraints aren't met.
type EntityChainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityChainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityChainMultiError) AllErrors() []error { return m }

// EntityChainValidationError is the validation error returned by
// EntityChain.Validate if the designated constraints aren't met.
type EntityChainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityChainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityChainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityChainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityChainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityChainValidationError) ErrorName() string { return "EntityChainValidationError" }

// Error satisfies the builtin error interface
func (e EntityChainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityChain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityChainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityChainValidationError{}

// Validate checks the field values on DecisionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecisionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecisionRequestMultiError, or nil if none found.
func (m *DecisionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecisionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DecisionRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEntityChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("EntityChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("EntityChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DecisionRequestValidationError{
					field:  fmt.Sprintf("EntityChains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResourceAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DecisionRequestValidationError{
						field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DecisionRequestValidationError{
					field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DecisionRequestMultiError(errors)
	}

	return nil
}

// DecisionRequestMultiError is an error wrapping multiple validation errors
// returned by DecisionRequest.ValidateAll() if the designated constraints
// aren't met.
type DecisionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecisionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecisionRequestMultiError) AllErrors() []error { return m }

// DecisionRequestValidationError is the validation error returned by
// DecisionRequest.Validate if the designated constraints aren't met.
type DecisionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecisionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecisionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecisionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecisionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecisionRequestValidationError) ErrorName() string { return "DecisionRequestValidationError" }

// Error satisfies the builtin error interface
func (e DecisionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecisionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecisionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecisionRequestValidationError{}

// Validate checks the field values on DecisionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecisionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecisionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecisionResponseMultiError, or nil if none found.
func (m *DecisionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DecisionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntityChainId

	// no validation rules for ResourceAttributesId

	if all {
		switch v := interface{}(m.GetAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DecisionResponseValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DecisionResponseValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecisionResponseValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Decision

	if len(errors) > 0 {
		return DecisionResponseMultiError(errors)
	}

	return nil
}

// DecisionResponseMultiError is an error wrapping multiple validation errors
// returned by DecisionResponse.ValidateAll() if the designated constraints
// aren't met.
type DecisionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecisionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecisionResponseMultiError) AllErrors() []error { return m }

// DecisionResponseValidationError is the validation error returned by
// DecisionResponse.Validate if the designated constraints aren't met.
type DecisionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecisionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecisionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecisionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecisionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecisionResponseValidationError) ErrorName() string { return "DecisionResponseValidationError" }

// Error satisfies the builtin error interface
func (e DecisionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecisionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecisionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecisionResponseValidationError{}

// Validate checks the field values on GetDecisionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDecisionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDecisionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDecisionsRequestMultiError, or nil if none found.
func (m *GetDecisionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDecisionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDecisionRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDecisionsRequestValidationError{
						field:  fmt.Sprintf("DecisionRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDecisionsRequestValidationError{
						field:  fmt.Sprintf("DecisionRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDecisionsRequestValidationError{
					field:  fmt.Sprintf("DecisionRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDecisionsRequestMultiError(errors)
	}

	return nil
}

// GetDecisionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetDecisionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDecisionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDecisionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDecisionsRequestMultiError) AllErrors() []error { return m }

// GetDecisionsRequestValidationError is the validation error returned by
// GetDecisionsRequest.Validate if the designated constraints aren't met.
type GetDecisionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDecisionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDecisionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDecisionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDecisionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDecisionsRequestValidationError) ErrorName() string {
	return "GetDecisionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDecisionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDecisionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDecisionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDecisionsRequestValidationError{}

// Validate checks the field values on GetDecisionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDecisionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDecisionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDecisionsResponseMultiError, or nil if none found.
func (m *GetDecisionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDecisionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDecisionResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDecisionsResponseValidationError{
						field:  fmt.Sprintf("DecisionResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDecisionsResponseValidationError{
						field:  fmt.Sprintf("DecisionResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDecisionsResponseValidationError{
					field:  fmt.Sprintf("DecisionResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDecisionsResponseMultiError(errors)
	}

	return nil
}

// GetDecisionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetDecisionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDecisionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDecisionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDecisionsResponseMultiError) AllErrors() []error { return m }

// GetDecisionsResponseValidationError is the validation error returned by
// GetDecisionsResponse.Validate if the designated constraints aren't met.
type GetDecisionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDecisionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDecisionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDecisionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDecisionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDecisionsResponseValidationError) ErrorName() string {
	return "GetDecisionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDecisionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDecisionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDecisionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDecisionsResponseValidationError{}

// Validate checks the field values on GetEntitlementsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntitlementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntitlementsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntitlementsRequestMultiError, or nil if none found.
func (m *GetEntitlementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntitlementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntitlementsRequestValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntitlementsRequestValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntitlementsRequestValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Scope != nil {

		if all {
			switch v := interface{}(m.GetScope()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntitlementsRequestValidationError{
						field:  "Scope",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntitlementsRequestValidationError{
						field:  "Scope",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntitlementsRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.WithComprehensiveHierarchy != nil {
		// no validation rules for WithComprehensiveHierarchy
	}

	if len(errors) > 0 {
		return GetEntitlementsRequestMultiError(errors)
	}

	return nil
}

// GetEntitlementsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEntitlementsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEntitlementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntitlementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntitlementsRequestMultiError) AllErrors() []error { return m }

// GetEntitlementsRequestValidationError is the validation error returned by
// GetEntitlementsRequest.Validate if the designated constraints aren't met.
type GetEntitlementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntitlementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntitlementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntitlementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntitlementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntitlementsRequestValidationError) ErrorName() string {
	return "GetEntitlementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntitlementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntitlementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntitlementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntitlementsRequestValidationError{}

// Validate checks the field values on EntityEntitlements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityEntitlements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityEntitlements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityEntitlementsMultiError, or nil if none found.
func (m *EntityEntitlements) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityEntitlements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntityId

	if len(errors) > 0 {
		return EntityEntitlementsMultiError(errors)
	}

	return nil
}

// EntityEntitlementsMultiError is an error wrapping multiple validation errors
// returned by EntityEntitlements.ValidateAll() if the designated constraints
// aren't met.
type EntityEntitlementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityEntitlementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityEntitlementsMultiError) AllErrors() []error { return m }

// EntityEntitlementsValidationError is the validation error returned by
// EntityEntitlements.Validate if the designated constraints aren't met.
type EntityEntitlementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityEntitlementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityEntitlementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityEntitlementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityEntitlementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityEntitlementsValidationError) ErrorName() string {
	return "EntityEntitlementsValidationError"
}

// Error satisfies the builtin error interface
func (e EntityEntitlementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityEntitlements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityEntitlementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityEntitlementsValidationError{}

// Validate checks the field values on ResourceAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceAttributeMultiError, or nil if none found.
func (m *ResourceAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceAttributesId

	if len(errors) > 0 {
		return ResourceAttributeMultiError(errors)
	}

	return nil
}

// ResourceAttributeMultiError is an error wrapping multiple validation errors
// returned by ResourceAttribute.ValidateAll() if the designated constraints
// aren't met.
type ResourceAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceAttributeMultiError) AllErrors() []error { return m }

// ResourceAttributeValidationError is the validation error returned by
// ResourceAttribute.Validate if the designated constraints aren't met.
type ResourceAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceAttributeValidationError) ErrorName() string {
	return "ResourceAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceAttributeValidationError{}

// Validate checks the field values on GetEntitlementsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntitlementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntitlementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntitlementsResponseMultiError, or nil if none found.
func (m *GetEntitlementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntitlementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntitlements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntitlementsResponseValidationError{
					field:  fmt.Sprintf("Entitlements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEntitlementsResponseMultiError(errors)
	}

	return nil
}

// GetEntitlementsResponseMultiError is an error wrapping multiple validation
// errors returned by GetEntitlementsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEntitlementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntitlementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntitlementsResponseMultiError) AllErrors() []error { return m }

// GetEntitlementsResponseValidationError is the validation error returned by
// GetEntitlementsResponse.Validate if the designated constraints aren't met.
type GetEntitlementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntitlementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntitlementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntitlementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntitlementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntitlementsResponseValidationError) ErrorName() string {
	return "GetEntitlementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntitlementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntitlementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntitlementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntitlementsResponseValidationError{}

// Validate checks the field values on TokenDecisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenDecisionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenDecisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenDecisionRequestMultiError, or nil if none found.
func (m *TokenDecisionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenDecisionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenDecisionRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenDecisionRequestValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResourceAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenDecisionRequestValidationError{
						field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenDecisionRequestValidationError{
					field:  fmt.Sprintf("ResourceAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TokenDecisionRequestMultiError(errors)
	}

	return nil
}

// TokenDecisionRequestMultiError is an error wrapping multiple validation
// errors returned by TokenDecisionRequest.ValidateAll() if the designated
// constraints aren't met.
type TokenDecisionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenDecisionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenDecisionRequestMultiError) AllErrors() []error { return m }

// TokenDecisionRequestValidationError is the validation error returned by
// TokenDecisionRequest.Validate if the designated constraints aren't met.
type TokenDecisionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenDecisionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenDecisionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenDecisionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenDecisionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenDecisionRequestValidationError) ErrorName() string {
	return "TokenDecisionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TokenDecisionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenDecisionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenDecisionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenDecisionRequestValidationError{}

// Validate checks the field values on GetDecisionsByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDecisionsByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDecisionsByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDecisionsByTokenRequestMultiError, or nil if none found.
func (m *GetDecisionsByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDecisionsByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDecisionRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDecisionsByTokenRequestValidationError{
						field:  fmt.Sprintf("DecisionRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDecisionsByTokenRequestValidationError{
						field:  fmt.Sprintf("DecisionRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDecisionsByTokenRequestValidationError{
					field:  fmt.Sprintf("DecisionRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDecisionsByTokenRequestMultiError(errors)
	}

	return nil
}

// GetDecisionsByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GetDecisionsByTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDecisionsByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDecisionsByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDecisionsByTokenRequestMultiError) AllErrors() []error { return m }

// GetDecisionsByTokenRequestValidationError is the validation error returned
// by GetDecisionsByTokenRequest.Validate if the designated constraints aren't met.
type GetDecisionsByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDecisionsByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDecisionsByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDecisionsByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDecisionsByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDecisionsByTokenRequestValidationError) ErrorName() string {
	return "GetDecisionsByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDecisionsByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDecisionsByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDecisionsByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDecisionsByTokenRequestValidationError{}

// Validate checks the field values on GetDecisionsByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDecisionsByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDecisionsByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDecisionsByTokenResponseMultiError, or nil if none found.
func (m *GetDecisionsByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDecisionsByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDecisionResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDecisionsByTokenResponseValidationError{
						field:  fmt.Sprintf("DecisionResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDecisionsByTokenResponseValidationError{
						field:  fmt.Sprintf("DecisionResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDecisionsByTokenResponseValidationError{
					field:  fmt.Sprintf("DecisionResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDecisionsByTokenResponseMultiError(errors)
	}

	return nil
}

// GetDecisionsByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GetDecisionsByTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDecisionsByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDecisionsByTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDecisionsByTokenResponseMultiError) AllErrors() []error { return m }

// GetDecisionsByTokenResponseValidationError is the validation error returned
// by GetDecisionsByTokenResponse.Validate if the designated constraints
// aren't met.
type GetDecisionsByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDecisionsByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDecisionsByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDecisionsByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDecisionsByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDecisionsByTokenResponseValidationError) ErrorName() string {
	return "GetDecisionsByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDecisionsByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDecisionsByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDecisionsByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDecisionsByTokenResponseValidationError{}
