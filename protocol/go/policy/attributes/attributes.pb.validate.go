// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/attributes/attributes.proto

package attributes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/opentdf/platform/protocol/go/common"

	policy "github.com/opentdf/platform/protocol/go/policy"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.ActiveStateEnum(0)

	_ = policy.AttributeRuleTypeEnum(0)
)

// Validate checks the field values on AttributeKeyAccessServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttributeKeyAccessServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeKeyAccessServer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttributeKeyAccessServerMultiError, or nil if none found.
func (m *AttributeKeyAccessServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeKeyAccessServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeId

	// no validation rules for KeyAccessServerId

	if len(errors) > 0 {
		return AttributeKeyAccessServerMultiError(errors)
	}

	return nil
}

// AttributeKeyAccessServerMultiError is an error wrapping multiple validation
// errors returned by AttributeKeyAccessServer.ValidateAll() if the designated
// constraints aren't met.
type AttributeKeyAccessServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeKeyAccessServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeKeyAccessServerMultiError) AllErrors() []error { return m }

// AttributeKeyAccessServerValidationError is the validation error returned by
// AttributeKeyAccessServer.Validate if the designated constraints aren't met.
type AttributeKeyAccessServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeKeyAccessServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeKeyAccessServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeKeyAccessServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeKeyAccessServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeKeyAccessServerValidationError) ErrorName() string {
	return "AttributeKeyAccessServerValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeKeyAccessServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeKeyAccessServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeKeyAccessServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeKeyAccessServerValidationError{}

// Validate checks the field values on ValueKeyAccessServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValueKeyAccessServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValueKeyAccessServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValueKeyAccessServerMultiError, or nil if none found.
func (m *ValueKeyAccessServer) ValidateAll() error {
	return m.validate(true)
}

func (m *ValueKeyAccessServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValueId

	// no validation rules for KeyAccessServerId

	if len(errors) > 0 {
		return ValueKeyAccessServerMultiError(errors)
	}

	return nil
}

// ValueKeyAccessServerMultiError is an error wrapping multiple validation
// errors returned by ValueKeyAccessServer.ValidateAll() if the designated
// constraints aren't met.
type ValueKeyAccessServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueKeyAccessServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueKeyAccessServerMultiError) AllErrors() []error { return m }

// ValueKeyAccessServerValidationError is the validation error returned by
// ValueKeyAccessServer.Validate if the designated constraints aren't met.
type ValueKeyAccessServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueKeyAccessServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueKeyAccessServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueKeyAccessServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueKeyAccessServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueKeyAccessServerValidationError) ErrorName() string {
	return "ValueKeyAccessServerValidationError"
}

// Error satisfies the builtin error interface
func (e ValueKeyAccessServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueKeyAccessServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueKeyAccessServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueKeyAccessServerValidationError{}

// Validate checks the field values on ListAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttributesRequestMultiError, or nil if none found.
func (m *ListAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ListAttributesRequestMultiError(errors)
	}

	return nil
}

// ListAttributesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAttributesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttributesRequestMultiError) AllErrors() []error { return m }

// ListAttributesRequestValidationError is the validation error returned by
// ListAttributesRequest.Validate if the designated constraints aren't met.
type ListAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributesRequestValidationError) ErrorName() string {
	return "ListAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributesRequestValidationError{}

// Validate checks the field values on ListAttributesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttributesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttributesResponseMultiError, or nil if none found.
func (m *ListAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttributesResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttributesResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttributesResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAttributesResponseMultiError(errors)
	}

	return nil
}

// ListAttributesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAttributesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttributesResponseMultiError) AllErrors() []error { return m }

// ListAttributesResponseValidationError is the validation error returned by
// ListAttributesResponse.Validate if the designated constraints aren't met.
type ListAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributesResponseValidationError) ErrorName() string {
	return "ListAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributesResponseValidationError{}

// Validate checks the field values on GetAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeRequestMultiError, or nil if none found.
func (m *GetAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAttributeRequestMultiError(errors)
	}

	return nil
}

// GetAttributeRequestMultiError is an error wrapping multiple validation
// errors returned by GetAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeRequestMultiError) AllErrors() []error { return m }

// GetAttributeRequestValidationError is the validation error returned by
// GetAttributeRequest.Validate if the designated constraints aren't met.
type GetAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeRequestValidationError) ErrorName() string {
	return "GetAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeRequestValidationError{}

// Validate checks the field values on GetAttributeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeResponseMultiError, or nil if none found.
func (m *GetAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAttributeResponseMultiError(errors)
	}

	return nil
}

// GetAttributeResponseMultiError is an error wrapping multiple validation
// errors returned by GetAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeResponseMultiError) AllErrors() []error { return m }

// GetAttributeResponseValidationError is the validation error returned by
// GetAttributeResponse.Validate if the designated constraints aren't met.
type GetAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeResponseValidationError) ErrorName() string {
	return "GetAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeResponseValidationError{}

// Validate checks the field values on CreateAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttributeRequestMultiError, or nil if none found.
func (m *CreateAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for Name

	// no validation rules for Rule

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttributeRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttributeRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttributeRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateAttributeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttributeRequestMultiError) AllErrors() []error { return m }

// CreateAttributeRequestValidationError is the validation error returned by
// CreateAttributeRequest.Validate if the designated constraints aren't met.
type CreateAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttributeRequestValidationError) ErrorName() string {
	return "CreateAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttributeRequestValidationError{}

// Validate checks the field values on CreateAttributeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttributeResponseMultiError, or nil if none found.
func (m *CreateAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttributeResponseMultiError(errors)
	}

	return nil
}

// CreateAttributeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttributeResponseMultiError) AllErrors() []error { return m }

// CreateAttributeResponseValidationError is the validation error returned by
// CreateAttributeResponse.Validate if the designated constraints aren't met.
type CreateAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttributeResponseValidationError) ErrorName() string {
	return "CreateAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttributeResponseValidationError{}

// Validate checks the field values on UpdateAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttributeRequestMultiError, or nil if none found.
func (m *UpdateAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttributeRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttributeRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttributeRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MetadataUpdateBehavior

	if len(errors) > 0 {
		return UpdateAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateAttributeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateAttributeRequestValidationError is the validation error returned by
// UpdateAttributeRequest.Validate if the designated constraints aren't met.
type UpdateAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttributeRequestValidationError) ErrorName() string {
	return "UpdateAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttributeRequestValidationError{}

// Validate checks the field values on UpdateAttributeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttributeResponseMultiError, or nil if none found.
func (m *UpdateAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAttributeResponseMultiError(errors)
	}

	return nil
}

// UpdateAttributeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttributeResponseMultiError) AllErrors() []error { return m }

// UpdateAttributeResponseValidationError is the validation error returned by
// UpdateAttributeResponse.Validate if the designated constraints aren't met.
type UpdateAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttributeResponseValidationError) ErrorName() string {
	return "UpdateAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttributeResponseValidationError{}

// Validate checks the field values on DeactivateAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateAttributeRequestMultiError, or nil if none found.
func (m *DeactivateAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeactivateAttributeRequestMultiError(errors)
	}

	return nil
}

// DeactivateAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by DeactivateAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type DeactivateAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAttributeRequestMultiError) AllErrors() []error { return m }

// DeactivateAttributeRequestValidationError is the validation error returned
// by DeactivateAttributeRequest.Validate if the designated constraints aren't met.
type DeactivateAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAttributeRequestValidationError) ErrorName() string {
	return "DeactivateAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAttributeRequestValidationError{}

// Validate checks the field values on DeactivateAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAttributeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateAttributeResponseMultiError, or nil if none found.
func (m *DeactivateAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeactivateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeactivateAttributeResponseValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateAttributeResponseValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeactivateAttributeResponseMultiError(errors)
	}

	return nil
}

// DeactivateAttributeResponseMultiError is an error wrapping multiple
// validation errors returned by DeactivateAttributeResponse.ValidateAll() if
// the designated constraints aren't met.
type DeactivateAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAttributeResponseMultiError) AllErrors() []error { return m }

// DeactivateAttributeResponseValidationError is the validation error returned
// by DeactivateAttributeResponse.Validate if the designated constraints
// aren't met.
type DeactivateAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAttributeResponseValidationError) ErrorName() string {
	return "DeactivateAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAttributeResponseValidationError{}

// Validate checks the field values on GetAttributeValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeValueRequestMultiError, or nil if none found.
func (m *GetAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAttributeValueRequestMultiError(errors)
	}

	return nil
}

// GetAttributeValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetAttributeValueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeValueRequestMultiError) AllErrors() []error { return m }

// GetAttributeValueRequestValidationError is the validation error returned by
// GetAttributeValueRequest.Validate if the designated constraints aren't met.
type GetAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeValueRequestValidationError) ErrorName() string {
	return "GetAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeValueRequestValidationError{}

// Validate checks the field values on GetAttributeValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeValueResponseMultiError, or nil if none found.
func (m *GetAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAttributeValueResponseMultiError(errors)
	}

	return nil
}

// GetAttributeValueResponseMultiError is an error wrapping multiple validation
// errors returned by GetAttributeValueResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeValueResponseMultiError) AllErrors() []error { return m }

// GetAttributeValueResponseValidationError is the validation error returned by
// GetAttributeValueResponse.Validate if the designated constraints aren't met.
type GetAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeValueResponseValidationError) ErrorName() string {
	return "GetAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeValueResponseValidationError{}

// Validate checks the field values on ListAttributeValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttributeValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttributeValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttributeValuesRequestMultiError, or nil if none found.
func (m *ListAttributeValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttributeValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeId

	// no validation rules for State

	if len(errors) > 0 {
		return ListAttributeValuesRequestMultiError(errors)
	}

	return nil
}

// ListAttributeValuesRequestMultiError is an error wrapping multiple
// validation errors returned by ListAttributeValuesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAttributeValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttributeValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttributeValuesRequestMultiError) AllErrors() []error { return m }

// ListAttributeValuesRequestValidationError is the validation error returned
// by ListAttributeValuesRequest.Validate if the designated constraints aren't met.
type ListAttributeValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributeValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributeValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributeValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributeValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributeValuesRequestValidationError) ErrorName() string {
	return "ListAttributeValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributeValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributeValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributeValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributeValuesRequestValidationError{}

// Validate checks the field values on ListAttributeValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttributeValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttributeValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttributeValuesResponseMultiError, or nil if none found.
func (m *ListAttributeValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttributeValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttributeValuesResponseValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttributeValuesResponseValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttributeValuesResponseValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAttributeValuesResponseMultiError(errors)
	}

	return nil
}

// ListAttributeValuesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAttributeValuesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAttributeValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttributeValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttributeValuesResponseMultiError) AllErrors() []error { return m }

// ListAttributeValuesResponseValidationError is the validation error returned
// by ListAttributeValuesResponse.Validate if the designated constraints
// aren't met.
type ListAttributeValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttributeValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttributeValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttributeValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttributeValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttributeValuesResponseValidationError) ErrorName() string {
	return "ListAttributeValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttributeValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttributeValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttributeValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttributeValuesResponseValidationError{}

// Validate checks the field values on CreateAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttributeValueRequestMultiError, or nil if none found.
func (m *CreateAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttributeId

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttributeValueRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttributeValueRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttributeValueRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttributeValueRequestMultiError(errors)
	}

	return nil
}

// CreateAttributeValueRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAttributeValueRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttributeValueRequestMultiError) AllErrors() []error { return m }

// CreateAttributeValueRequestValidationError is the validation error returned
// by CreateAttributeValueRequest.Validate if the designated constraints
// aren't met.
type CreateAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttributeValueRequestValidationError) ErrorName() string {
	return "CreateAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttributeValueRequestValidationError{}

// Validate checks the field values on CreateAttributeValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttributeValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttributeValueResponseMultiError, or nil if none found.
func (m *CreateAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttributeValueResponseMultiError(errors)
	}

	return nil
}

// CreateAttributeValueResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAttributeValueResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttributeValueResponseMultiError) AllErrors() []error { return m }

// CreateAttributeValueResponseValidationError is the validation error returned
// by CreateAttributeValueResponse.Validate if the designated constraints
// aren't met.
type CreateAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttributeValueResponseValidationError) ErrorName() string {
	return "CreateAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttributeValueResponseValidationError{}

// Validate checks the field values on UpdateAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttributeValueRequestMultiError, or nil if none found.
func (m *UpdateAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttributeValueRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttributeValueRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttributeValueRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MetadataUpdateBehavior

	if len(errors) > 0 {
		return UpdateAttributeValueRequestMultiError(errors)
	}

	return nil
}

// UpdateAttributeValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAttributeValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttributeValueRequestMultiError) AllErrors() []error { return m }

// UpdateAttributeValueRequestValidationError is the validation error returned
// by UpdateAttributeValueRequest.Validate if the designated constraints
// aren't met.
type UpdateAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttributeValueRequestValidationError) ErrorName() string {
	return "UpdateAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttributeValueRequestValidationError{}

// Validate checks the field values on UpdateAttributeValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttributeValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttributeValueResponseMultiError, or nil if none found.
func (m *UpdateAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAttributeValueResponseMultiError(errors)
	}

	return nil
}

// UpdateAttributeValueResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAttributeValueResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttributeValueResponseMultiError) AllErrors() []error { return m }

// UpdateAttributeValueResponseValidationError is the validation error returned
// by UpdateAttributeValueResponse.Validate if the designated constraints
// aren't met.
type UpdateAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttributeValueResponseValidationError) ErrorName() string {
	return "UpdateAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttributeValueResponseValidationError{}

// Validate checks the field values on DeactivateAttributeValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateAttributeValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAttributeValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeactivateAttributeValueRequestMultiError, or nil if none found.
func (m *DeactivateAttributeValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAttributeValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeactivateAttributeValueRequestMultiError(errors)
	}

	return nil
}

// DeactivateAttributeValueRequestMultiError is an error wrapping multiple
// validation errors returned by DeactivateAttributeValueRequest.ValidateAll()
// if the designated constraints aren't met.
type DeactivateAttributeValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAttributeValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAttributeValueRequestMultiError) AllErrors() []error { return m }

// DeactivateAttributeValueRequestValidationError is the validation error
// returned by DeactivateAttributeValueRequest.Validate if the designated
// constraints aren't met.
type DeactivateAttributeValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAttributeValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAttributeValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAttributeValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAttributeValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAttributeValueRequestValidationError) ErrorName() string {
	return "DeactivateAttributeValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAttributeValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAttributeValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAttributeValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAttributeValueRequestValidationError{}

// Validate checks the field values on DeactivateAttributeValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeactivateAttributeValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAttributeValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeactivateAttributeValueResponseMultiError, or nil if none found.
func (m *DeactivateAttributeValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAttributeValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeactivateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeactivateAttributeValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateAttributeValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeactivateAttributeValueResponseMultiError(errors)
	}

	return nil
}

// DeactivateAttributeValueResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeactivateAttributeValueResponse.ValidateAll() if the designated
// constraints aren't met.
type DeactivateAttributeValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAttributeValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAttributeValueResponseMultiError) AllErrors() []error { return m }

// DeactivateAttributeValueResponseValidationError is the validation error
// returned by DeactivateAttributeValueResponse.Validate if the designated
// constraints aren't met.
type DeactivateAttributeValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAttributeValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAttributeValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAttributeValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAttributeValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAttributeValueResponseValidationError) ErrorName() string {
	return "DeactivateAttributeValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAttributeValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAttributeValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAttributeValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAttributeValueResponseValidationError{}

// Validate checks the field values on GetAttributeValuesByFqnsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeValuesByFqnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeValuesByFqnsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAttributeValuesByFqnsRequestMultiError, or nil if none found.
func (m *GetAttributeValuesByFqnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeValuesByFqnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWithValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsRequestValidationError{
					field:  "WithValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsRequestValidationError{
					field:  "WithValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttributeValuesByFqnsRequestValidationError{
				field:  "WithValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAttributeValuesByFqnsRequestMultiError(errors)
	}

	return nil
}

// GetAttributeValuesByFqnsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAttributeValuesByFqnsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAttributeValuesByFqnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeValuesByFqnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeValuesByFqnsRequestMultiError) AllErrors() []error { return m }

// GetAttributeValuesByFqnsRequestValidationError is the validation error
// returned by GetAttributeValuesByFqnsRequest.Validate if the designated
// constraints aren't met.
type GetAttributeValuesByFqnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeValuesByFqnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeValuesByFqnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeValuesByFqnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeValuesByFqnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeValuesByFqnsRequestValidationError) ErrorName() string {
	return "GetAttributeValuesByFqnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeValuesByFqnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeValuesByFqnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeValuesByFqnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeValuesByFqnsRequestValidationError{}

// Validate checks the field values on GetAttributeValuesByFqnsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAttributeValuesByFqnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeValuesByFqnsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAttributeValuesByFqnsResponseMultiError, or nil if none found.
func (m *GetAttributeValuesByFqnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeValuesByFqnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetFqnAttributeValues()))
		i := 0
		for key := range m.GetFqnAttributeValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFqnAttributeValues()[key]
			_ = val

			// no validation rules for FqnAttributeValues[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetAttributeValuesByFqnsResponseValidationError{
							field:  fmt.Sprintf("FqnAttributeValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetAttributeValuesByFqnsResponseValidationError{
							field:  fmt.Sprintf("FqnAttributeValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetAttributeValuesByFqnsResponseValidationError{
						field:  fmt.Sprintf("FqnAttributeValues[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetAttributeValuesByFqnsResponseMultiError(errors)
	}

	return nil
}

// GetAttributeValuesByFqnsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAttributeValuesByFqnsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAttributeValuesByFqnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeValuesByFqnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeValuesByFqnsResponseMultiError) AllErrors() []error { return m }

// GetAttributeValuesByFqnsResponseValidationError is the validation error
// returned by GetAttributeValuesByFqnsResponse.Validate if the designated
// constraints aren't met.
type GetAttributeValuesByFqnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeValuesByFqnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeValuesByFqnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeValuesByFqnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeValuesByFqnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeValuesByFqnsResponseValidationError) ErrorName() string {
	return "GetAttributeValuesByFqnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeValuesByFqnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeValuesByFqnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeValuesByFqnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeValuesByFqnsResponseValidationError{}

// Validate checks the field values on AssignKeyAccessServerToAttributeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssignKeyAccessServerToAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AssignKeyAccessServerToAttributeRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AssignKeyAccessServerToAttributeRequestMultiError, or nil if none found.
func (m *AssignKeyAccessServerToAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignKeyAccessServerToAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttributeKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignKeyAccessServerToAttributeRequestValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignKeyAccessServerToAttributeRequestValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributeKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignKeyAccessServerToAttributeRequestValidationError{
				field:  "AttributeKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssignKeyAccessServerToAttributeRequestMultiError(errors)
	}

	return nil
}

// AssignKeyAccessServerToAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// AssignKeyAccessServerToAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignKeyAccessServerToAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignKeyAccessServerToAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignKeyAccessServerToAttributeRequestMultiError) AllErrors() []error { return m }

// AssignKeyAccessServerToAttributeRequestValidationError is the validation
// error returned by AssignKeyAccessServerToAttributeRequest.Validate if the
// designated constraints aren't met.
type AssignKeyAccessServerToAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignKeyAccessServerToAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignKeyAccessServerToAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignKeyAccessServerToAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignKeyAccessServerToAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignKeyAccessServerToAttributeRequestValidationError) ErrorName() string {
	return "AssignKeyAccessServerToAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignKeyAccessServerToAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignKeyAccessServerToAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignKeyAccessServerToAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignKeyAccessServerToAttributeRequestValidationError{}

// Validate checks the field values on AssignKeyAccessServerToAttributeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssignKeyAccessServerToAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AssignKeyAccessServerToAttributeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AssignKeyAccessServerToAttributeResponseMultiError, or nil if none found.
func (m *AssignKeyAccessServerToAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignKeyAccessServerToAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttributeKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignKeyAccessServerToAttributeResponseValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignKeyAccessServerToAttributeResponseValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributeKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignKeyAccessServerToAttributeResponseValidationError{
				field:  "AttributeKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssignKeyAccessServerToAttributeResponseMultiError(errors)
	}

	return nil
}

// AssignKeyAccessServerToAttributeResponseMultiError is an error wrapping
// multiple validation errors returned by
// AssignKeyAccessServerToAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignKeyAccessServerToAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignKeyAccessServerToAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignKeyAccessServerToAttributeResponseMultiError) AllErrors() []error { return m }

// AssignKeyAccessServerToAttributeResponseValidationError is the validation
// error returned by AssignKeyAccessServerToAttributeResponse.Validate if the
// designated constraints aren't met.
type AssignKeyAccessServerToAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignKeyAccessServerToAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignKeyAccessServerToAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignKeyAccessServerToAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignKeyAccessServerToAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignKeyAccessServerToAttributeResponseValidationError) ErrorName() string {
	return "AssignKeyAccessServerToAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignKeyAccessServerToAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignKeyAccessServerToAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignKeyAccessServerToAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignKeyAccessServerToAttributeResponseValidationError{}

// Validate checks the field values on
// RemoveKeyAccessServerFromAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveKeyAccessServerFromAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveKeyAccessServerFromAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveKeyAccessServerFromAttributeRequestMultiError, or nil if none found.
func (m *RemoveKeyAccessServerFromAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveKeyAccessServerFromAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttributeKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromAttributeRequestValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromAttributeRequestValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributeKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveKeyAccessServerFromAttributeRequestValidationError{
				field:  "AttributeKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveKeyAccessServerFromAttributeRequestMultiError(errors)
	}

	return nil
}

// RemoveKeyAccessServerFromAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveKeyAccessServerFromAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveKeyAccessServerFromAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveKeyAccessServerFromAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveKeyAccessServerFromAttributeRequestMultiError) AllErrors() []error { return m }

// RemoveKeyAccessServerFromAttributeRequestValidationError is the validation
// error returned by RemoveKeyAccessServerFromAttributeRequest.Validate if the
// designated constraints aren't met.
type RemoveKeyAccessServerFromAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) ErrorName() string {
	return "RemoveKeyAccessServerFromAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveKeyAccessServerFromAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveKeyAccessServerFromAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveKeyAccessServerFromAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveKeyAccessServerFromAttributeRequestValidationError{}

// Validate checks the field values on
// RemoveKeyAccessServerFromAttributeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveKeyAccessServerFromAttributeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveKeyAccessServerFromAttributeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveKeyAccessServerFromAttributeResponseMultiError, or nil if none found.
func (m *RemoveKeyAccessServerFromAttributeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveKeyAccessServerFromAttributeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttributeKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromAttributeResponseValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromAttributeResponseValidationError{
					field:  "AttributeKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributeKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveKeyAccessServerFromAttributeResponseValidationError{
				field:  "AttributeKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveKeyAccessServerFromAttributeResponseMultiError(errors)
	}

	return nil
}

// RemoveKeyAccessServerFromAttributeResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveKeyAccessServerFromAttributeResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveKeyAccessServerFromAttributeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveKeyAccessServerFromAttributeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveKeyAccessServerFromAttributeResponseMultiError) AllErrors() []error { return m }

// RemoveKeyAccessServerFromAttributeResponseValidationError is the validation
// error returned by RemoveKeyAccessServerFromAttributeResponse.Validate if
// the designated constraints aren't met.
type RemoveKeyAccessServerFromAttributeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) ErrorName() string {
	return "RemoveKeyAccessServerFromAttributeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveKeyAccessServerFromAttributeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveKeyAccessServerFromAttributeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveKeyAccessServerFromAttributeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveKeyAccessServerFromAttributeResponseValidationError{}

// Validate checks the field values on AssignKeyAccessServerToValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssignKeyAccessServerToValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignKeyAccessServerToValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignKeyAccessServerToValueRequestMultiError, or nil if none found.
func (m *AssignKeyAccessServerToValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignKeyAccessServerToValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValueKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignKeyAccessServerToValueRequestValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignKeyAccessServerToValueRequestValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignKeyAccessServerToValueRequestValidationError{
				field:  "ValueKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssignKeyAccessServerToValueRequestMultiError(errors)
	}

	return nil
}

// AssignKeyAccessServerToValueRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssignKeyAccessServerToValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignKeyAccessServerToValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignKeyAccessServerToValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignKeyAccessServerToValueRequestMultiError) AllErrors() []error { return m }

// AssignKeyAccessServerToValueRequestValidationError is the validation error
// returned by AssignKeyAccessServerToValueRequest.Validate if the designated
// constraints aren't met.
type AssignKeyAccessServerToValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignKeyAccessServerToValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignKeyAccessServerToValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignKeyAccessServerToValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignKeyAccessServerToValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignKeyAccessServerToValueRequestValidationError) ErrorName() string {
	return "AssignKeyAccessServerToValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignKeyAccessServerToValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignKeyAccessServerToValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignKeyAccessServerToValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignKeyAccessServerToValueRequestValidationError{}

// Validate checks the field values on AssignKeyAccessServerToValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssignKeyAccessServerToValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignKeyAccessServerToValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignKeyAccessServerToValueResponseMultiError, or nil if none found.
func (m *AssignKeyAccessServerToValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignKeyAccessServerToValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValueKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignKeyAccessServerToValueResponseValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignKeyAccessServerToValueResponseValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignKeyAccessServerToValueResponseValidationError{
				field:  "ValueKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssignKeyAccessServerToValueResponseMultiError(errors)
	}

	return nil
}

// AssignKeyAccessServerToValueResponseMultiError is an error wrapping multiple
// validation errors returned by
// AssignKeyAccessServerToValueResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignKeyAccessServerToValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignKeyAccessServerToValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignKeyAccessServerToValueResponseMultiError) AllErrors() []error { return m }

// AssignKeyAccessServerToValueResponseValidationError is the validation error
// returned by AssignKeyAccessServerToValueResponse.Validate if the designated
// constraints aren't met.
type AssignKeyAccessServerToValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignKeyAccessServerToValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignKeyAccessServerToValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignKeyAccessServerToValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignKeyAccessServerToValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignKeyAccessServerToValueResponseValidationError) ErrorName() string {
	return "AssignKeyAccessServerToValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignKeyAccessServerToValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignKeyAccessServerToValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignKeyAccessServerToValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignKeyAccessServerToValueResponseValidationError{}

// Validate checks the field values on RemoveKeyAccessServerFromValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveKeyAccessServerFromValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveKeyAccessServerFromValueRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveKeyAccessServerFromValueRequestMultiError, or nil if none found.
func (m *RemoveKeyAccessServerFromValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveKeyAccessServerFromValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValueKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromValueRequestValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromValueRequestValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveKeyAccessServerFromValueRequestValidationError{
				field:  "ValueKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveKeyAccessServerFromValueRequestMultiError(errors)
	}

	return nil
}

// RemoveKeyAccessServerFromValueRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveKeyAccessServerFromValueRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveKeyAccessServerFromValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveKeyAccessServerFromValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveKeyAccessServerFromValueRequestMultiError) AllErrors() []error { return m }

// RemoveKeyAccessServerFromValueRequestValidationError is the validation error
// returned by RemoveKeyAccessServerFromValueRequest.Validate if the
// designated constraints aren't met.
type RemoveKeyAccessServerFromValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveKeyAccessServerFromValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveKeyAccessServerFromValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveKeyAccessServerFromValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveKeyAccessServerFromValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveKeyAccessServerFromValueRequestValidationError) ErrorName() string {
	return "RemoveKeyAccessServerFromValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveKeyAccessServerFromValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveKeyAccessServerFromValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveKeyAccessServerFromValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveKeyAccessServerFromValueRequestValidationError{}

// Validate checks the field values on RemoveKeyAccessServerFromValueResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveKeyAccessServerFromValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveKeyAccessServerFromValueResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RemoveKeyAccessServerFromValueResponseMultiError, or nil if none found.
func (m *RemoveKeyAccessServerFromValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveKeyAccessServerFromValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValueKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromValueResponseValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveKeyAccessServerFromValueResponseValidationError{
					field:  "ValueKeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveKeyAccessServerFromValueResponseValidationError{
				field:  "ValueKeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveKeyAccessServerFromValueResponseMultiError(errors)
	}

	return nil
}

// RemoveKeyAccessServerFromValueResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveKeyAccessServerFromValueResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveKeyAccessServerFromValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveKeyAccessServerFromValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveKeyAccessServerFromValueResponseMultiError) AllErrors() []error { return m }

// RemoveKeyAccessServerFromValueResponseValidationError is the validation
// error returned by RemoveKeyAccessServerFromValueResponse.Validate if the
// designated constraints aren't met.
type RemoveKeyAccessServerFromValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveKeyAccessServerFromValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveKeyAccessServerFromValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveKeyAccessServerFromValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveKeyAccessServerFromValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveKeyAccessServerFromValueResponseValidationError) ErrorName() string {
	return "RemoveKeyAccessServerFromValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveKeyAccessServerFromValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveKeyAccessServerFromValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveKeyAccessServerFromValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveKeyAccessServerFromValueResponseValidationError{}

// Validate checks the field values on
// GetAttributeValuesByFqnsResponse_AttributeAndValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeValuesByFqnsResponse_AttributeAndValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAttributeValuesByFqnsResponse_AttributeAndValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError, or nil if
// none found.
func (m *GetAttributeValuesByFqnsResponse_AttributeAndValue) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeValuesByFqnsResponse_AttributeAndValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
				field:  "Attribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError(errors)
	}

	return nil
}

// GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError is an error
// wrapping multiple validation errors returned by
// GetAttributeValuesByFqnsResponse_AttributeAndValue.ValidateAll() if the
// designated constraints aren't met.
type GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeValuesByFqnsResponse_AttributeAndValueMultiError) AllErrors() []error { return m }

// GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError is the
// validation error returned by
// GetAttributeValuesByFqnsResponse_AttributeAndValue.Validate if the
// designated constraints aren't met.
type GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) ErrorName() string {
	return "GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeValuesByFqnsResponse_AttributeAndValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeValuesByFqnsResponse_AttributeAndValueValidationError{}
