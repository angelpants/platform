// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/kasregistry/key_access_server_registry.proto

package kasregistry

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/opentdf/platform/protocol/go/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.MetadataUpdateEnum(0)
)

// Validate checks the field values on GetKeyAccessServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKeyAccessServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKeyAccessServerRequestMultiError, or nil if none found.
func (m *GetKeyAccessServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyAccessServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetKeyAccessServerRequestMultiError(errors)
	}

	return nil
}

// GetKeyAccessServerRequestMultiError is an error wrapping multiple validation
// errors returned by GetKeyAccessServerRequest.ValidateAll() if the
// designated constraints aren't met.
type GetKeyAccessServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyAccessServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyAccessServerRequestMultiError) AllErrors() []error { return m }

// GetKeyAccessServerRequestValidationError is the validation error returned by
// GetKeyAccessServerRequest.Validate if the designated constraints aren't met.
type GetKeyAccessServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyAccessServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyAccessServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyAccessServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyAccessServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyAccessServerRequestValidationError) ErrorName() string {
	return "GetKeyAccessServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKeyAccessServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyAccessServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyAccessServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyAccessServerRequestValidationError{}

// Validate checks the field values on GetKeyAccessServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKeyAccessServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyAccessServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKeyAccessServerResponseMultiError, or nil if none found.
func (m *GetKeyAccessServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyAccessServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKeyAccessServerResponseValidationError{
				field:  "KeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKeyAccessServerResponseMultiError(errors)
	}

	return nil
}

// GetKeyAccessServerResponseMultiError is an error wrapping multiple
// validation errors returned by GetKeyAccessServerResponse.ValidateAll() if
// the designated constraints aren't met.
type GetKeyAccessServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyAccessServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyAccessServerResponseMultiError) AllErrors() []error { return m }

// GetKeyAccessServerResponseValidationError is the validation error returned
// by GetKeyAccessServerResponse.Validate if the designated constraints aren't met.
type GetKeyAccessServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyAccessServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyAccessServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyAccessServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyAccessServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyAccessServerResponseValidationError) ErrorName() string {
	return "GetKeyAccessServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKeyAccessServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyAccessServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyAccessServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyAccessServerResponseValidationError{}

// Validate checks the field values on ListKeyAccessServersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKeyAccessServersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeyAccessServersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeyAccessServersRequestMultiError, or nil if none found.
func (m *ListKeyAccessServersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeyAccessServersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListKeyAccessServersRequestMultiError(errors)
	}

	return nil
}

// ListKeyAccessServersRequestMultiError is an error wrapping multiple
// validation errors returned by ListKeyAccessServersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListKeyAccessServersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeyAccessServersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeyAccessServersRequestMultiError) AllErrors() []error { return m }

// ListKeyAccessServersRequestValidationError is the validation error returned
// by ListKeyAccessServersRequest.Validate if the designated constraints
// aren't met.
type ListKeyAccessServersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeyAccessServersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeyAccessServersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeyAccessServersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeyAccessServersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeyAccessServersRequestValidationError) ErrorName() string {
	return "ListKeyAccessServersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKeyAccessServersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeyAccessServersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeyAccessServersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeyAccessServersRequestValidationError{}

// Validate checks the field values on ListKeyAccessServersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKeyAccessServersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeyAccessServersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeyAccessServersResponseMultiError, or nil if none found.
func (m *ListKeyAccessServersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeyAccessServersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeyAccessServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKeyAccessServersResponseValidationError{
						field:  fmt.Sprintf("KeyAccessServers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKeyAccessServersResponseValidationError{
						field:  fmt.Sprintf("KeyAccessServers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKeyAccessServersResponseValidationError{
					field:  fmt.Sprintf("KeyAccessServers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKeyAccessServersResponseMultiError(errors)
	}

	return nil
}

// ListKeyAccessServersResponseMultiError is an error wrapping multiple
// validation errors returned by ListKeyAccessServersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListKeyAccessServersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeyAccessServersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeyAccessServersResponseMultiError) AllErrors() []error { return m }

// ListKeyAccessServersResponseValidationError is the validation error returned
// by ListKeyAccessServersResponse.Validate if the designated constraints
// aren't met.
type ListKeyAccessServersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeyAccessServersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeyAccessServersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeyAccessServersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeyAccessServersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeyAccessServersResponseValidationError) ErrorName() string {
	return "ListKeyAccessServersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKeyAccessServersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeyAccessServersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeyAccessServersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeyAccessServersResponseValidationError{}

// Validate checks the field values on CreateKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyAccessServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeyAccessServerRequestMultiError, or nil if none found.
func (m *CreateKeyAccessServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyAccessServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeyAccessServerRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeyAccessServerRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeyAccessServerRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeyAccessServerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeyAccessServerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeyAccessServerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateKeyAccessServerRequestMultiError(errors)
	}

	return nil
}

// CreateKeyAccessServerRequestMultiError is an error wrapping multiple
// validation errors returned by CreateKeyAccessServerRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateKeyAccessServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyAccessServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyAccessServerRequestMultiError) AllErrors() []error { return m }

// CreateKeyAccessServerRequestValidationError is the validation error returned
// by CreateKeyAccessServerRequest.Validate if the designated constraints
// aren't met.
type CreateKeyAccessServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyAccessServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyAccessServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyAccessServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyAccessServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyAccessServerRequestValidationError) ErrorName() string {
	return "CreateKeyAccessServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKeyAccessServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyAccessServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyAccessServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyAccessServerRequestValidationError{}

// Validate checks the field values on CreateKeyAccessServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyAccessServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyAccessServerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKeyAccessServerResponseMultiError, or nil if none found.
func (m *CreateKeyAccessServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyAccessServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeyAccessServerResponseValidationError{
				field:  "KeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateKeyAccessServerResponseMultiError(errors)
	}

	return nil
}

// CreateKeyAccessServerResponseMultiError is an error wrapping multiple
// validation errors returned by CreateKeyAccessServerResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateKeyAccessServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyAccessServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyAccessServerResponseMultiError) AllErrors() []error { return m }

// CreateKeyAccessServerResponseValidationError is the validation error
// returned by CreateKeyAccessServerResponse.Validate if the designated
// constraints aren't met.
type CreateKeyAccessServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyAccessServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyAccessServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyAccessServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyAccessServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyAccessServerResponseValidationError) ErrorName() string {
	return "CreateKeyAccessServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKeyAccessServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyAccessServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyAccessServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyAccessServerResponseValidationError{}

// Validate checks the field values on UpdateKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateKeyAccessServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKeyAccessServerRequestMultiError, or nil if none found.
func (m *UpdateKeyAccessServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKeyAccessServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uri

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKeyAccessServerRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKeyAccessServerRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKeyAccessServerRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKeyAccessServerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKeyAccessServerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKeyAccessServerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MetadataUpdateBehavior

	if len(errors) > 0 {
		return UpdateKeyAccessServerRequestMultiError(errors)
	}

	return nil
}

// UpdateKeyAccessServerRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateKeyAccessServerRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateKeyAccessServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKeyAccessServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKeyAccessServerRequestMultiError) AllErrors() []error { return m }

// UpdateKeyAccessServerRequestValidationError is the validation error returned
// by UpdateKeyAccessServerRequest.Validate if the designated constraints
// aren't met.
type UpdateKeyAccessServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKeyAccessServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKeyAccessServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKeyAccessServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKeyAccessServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKeyAccessServerRequestValidationError) ErrorName() string {
	return "UpdateKeyAccessServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKeyAccessServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKeyAccessServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKeyAccessServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKeyAccessServerRequestValidationError{}

// Validate checks the field values on UpdateKeyAccessServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateKeyAccessServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKeyAccessServerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateKeyAccessServerResponseMultiError, or nil if none found.
func (m *UpdateKeyAccessServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKeyAccessServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKeyAccessServerResponseValidationError{
				field:  "KeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateKeyAccessServerResponseMultiError(errors)
	}

	return nil
}

// UpdateKeyAccessServerResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateKeyAccessServerResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateKeyAccessServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKeyAccessServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKeyAccessServerResponseMultiError) AllErrors() []error { return m }

// UpdateKeyAccessServerResponseValidationError is the validation error
// returned by UpdateKeyAccessServerResponse.Validate if the designated
// constraints aren't met.
type UpdateKeyAccessServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKeyAccessServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKeyAccessServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKeyAccessServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKeyAccessServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKeyAccessServerResponseValidationError) ErrorName() string {
	return "UpdateKeyAccessServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKeyAccessServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKeyAccessServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKeyAccessServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKeyAccessServerResponseValidationError{}

// Validate checks the field values on DeleteKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeyAccessServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeyAccessServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeyAccessServerRequestMultiError, or nil if none found.
func (m *DeleteKeyAccessServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeyAccessServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteKeyAccessServerRequestMultiError(errors)
	}

	return nil
}

// DeleteKeyAccessServerRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteKeyAccessServerRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteKeyAccessServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyAccessServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyAccessServerRequestMultiError) AllErrors() []error { return m }

// DeleteKeyAccessServerRequestValidationError is the validation error returned
// by DeleteKeyAccessServerRequest.Validate if the designated constraints
// aren't met.
type DeleteKeyAccessServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyAccessServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyAccessServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyAccessServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyAccessServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyAccessServerRequestValidationError) ErrorName() string {
	return "DeleteKeyAccessServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKeyAccessServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeyAccessServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyAccessServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyAccessServerRequestValidationError{}

// Validate checks the field values on DeleteKeyAccessServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeyAccessServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeyAccessServerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteKeyAccessServerResponseMultiError, or nil if none found.
func (m *DeleteKeyAccessServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeyAccessServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyAccessServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteKeyAccessServerResponseValidationError{
					field:  "KeyAccessServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyAccessServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteKeyAccessServerResponseValidationError{
				field:  "KeyAccessServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteKeyAccessServerResponseMultiError(errors)
	}

	return nil
}

// DeleteKeyAccessServerResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteKeyAccessServerResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteKeyAccessServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyAccessServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyAccessServerResponseMultiError) AllErrors() []error { return m }

// DeleteKeyAccessServerResponseValidationError is the validation error
// returned by DeleteKeyAccessServerResponse.Validate if the designated
// constraints aren't met.
type DeleteKeyAccessServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyAccessServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyAccessServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyAccessServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyAccessServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyAccessServerResponseValidationError) ErrorName() string {
	return "DeleteKeyAccessServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKeyAccessServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeyAccessServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyAccessServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyAccessServerResponseValidationError{}
